'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5472
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Gestion"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Gestion
    Inherits Global.System.Data.DataSet
    
    Private tableMaestroProducto_cargador As MaestroProducto_cargadorDataTable
    
    Private tablesp_InsertaMP_cargadorDinamico As sp_InsertaMP_cargadorDinamicoDataTable
    
    Private tablesp_actualiza_MaestroProducto_STEP As sp_actualiza_MaestroProducto_STEPDataTable
    
    Private tablesp_carga_MaestroProducto_STEP As sp_carga_MaestroProducto_STEPDataTable
    
    Private tablevw_pos_producto_agrupacion As vw_pos_producto_agrupacionDataTable
    
    Private tablemaestroProducto_paisOrigen As maestroProducto_paisOrigenDataTable
    
    Private tablevw_maestroProducto As vw_maestroProductoDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MaestroProducto_cargador")) Is Nothing) Then
                MyBase.Tables.Add(New MaestroProducto_cargadorDataTable(ds.Tables("MaestroProducto_cargador")))
            End If
            If (Not (ds.Tables("sp_InsertaMP_cargadorDinamico")) Is Nothing) Then
                MyBase.Tables.Add(New sp_InsertaMP_cargadorDinamicoDataTable(ds.Tables("sp_InsertaMP_cargadorDinamico")))
            End If
            If (Not (ds.Tables("sp_actualiza_MaestroProducto_STEP")) Is Nothing) Then
                MyBase.Tables.Add(New sp_actualiza_MaestroProducto_STEPDataTable(ds.Tables("sp_actualiza_MaestroProducto_STEP")))
            End If
            If (Not (ds.Tables("sp_carga_MaestroProducto_STEP")) Is Nothing) Then
                MyBase.Tables.Add(New sp_carga_MaestroProducto_STEPDataTable(ds.Tables("sp_carga_MaestroProducto_STEP")))
            End If
            If (Not (ds.Tables("vw_pos_producto_agrupacion")) Is Nothing) Then
                MyBase.Tables.Add(New vw_pos_producto_agrupacionDataTable(ds.Tables("vw_pos_producto_agrupacion")))
            End If
            If (Not (ds.Tables("maestroProducto_paisOrigen")) Is Nothing) Then
                MyBase.Tables.Add(New maestroProducto_paisOrigenDataTable(ds.Tables("maestroProducto_paisOrigen")))
            End If
            If (Not (ds.Tables("vw_maestroProducto")) Is Nothing) Then
                MyBase.Tables.Add(New vw_maestroProductoDataTable(ds.Tables("vw_maestroProducto")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MaestroProducto_cargador() As MaestroProducto_cargadorDataTable
        Get
            Return Me.tableMaestroProducto_cargador
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_InsertaMP_cargadorDinamico() As sp_InsertaMP_cargadorDinamicoDataTable
        Get
            Return Me.tablesp_InsertaMP_cargadorDinamico
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_actualiza_MaestroProducto_STEP() As sp_actualiza_MaestroProducto_STEPDataTable
        Get
            Return Me.tablesp_actualiza_MaestroProducto_STEP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_carga_MaestroProducto_STEP() As sp_carga_MaestroProducto_STEPDataTable
        Get
            Return Me.tablesp_carga_MaestroProducto_STEP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vw_pos_producto_agrupacion() As vw_pos_producto_agrupacionDataTable
        Get
            Return Me.tablevw_pos_producto_agrupacion
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property maestroProducto_paisOrigen() As maestroProducto_paisOrigenDataTable
        Get
            Return Me.tablemaestroProducto_paisOrigen
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vw_maestroProducto() As vw_maestroProductoDataTable
        Get
            Return Me.tablevw_maestroProducto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Gestion = CType(MyBase.Clone,Gestion)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MaestroProducto_cargador")) Is Nothing) Then
                MyBase.Tables.Add(New MaestroProducto_cargadorDataTable(ds.Tables("MaestroProducto_cargador")))
            End If
            If (Not (ds.Tables("sp_InsertaMP_cargadorDinamico")) Is Nothing) Then
                MyBase.Tables.Add(New sp_InsertaMP_cargadorDinamicoDataTable(ds.Tables("sp_InsertaMP_cargadorDinamico")))
            End If
            If (Not (ds.Tables("sp_actualiza_MaestroProducto_STEP")) Is Nothing) Then
                MyBase.Tables.Add(New sp_actualiza_MaestroProducto_STEPDataTable(ds.Tables("sp_actualiza_MaestroProducto_STEP")))
            End If
            If (Not (ds.Tables("sp_carga_MaestroProducto_STEP")) Is Nothing) Then
                MyBase.Tables.Add(New sp_carga_MaestroProducto_STEPDataTable(ds.Tables("sp_carga_MaestroProducto_STEP")))
            End If
            If (Not (ds.Tables("vw_pos_producto_agrupacion")) Is Nothing) Then
                MyBase.Tables.Add(New vw_pos_producto_agrupacionDataTable(ds.Tables("vw_pos_producto_agrupacion")))
            End If
            If (Not (ds.Tables("maestroProducto_paisOrigen")) Is Nothing) Then
                MyBase.Tables.Add(New maestroProducto_paisOrigenDataTable(ds.Tables("maestroProducto_paisOrigen")))
            End If
            If (Not (ds.Tables("vw_maestroProducto")) Is Nothing) Then
                MyBase.Tables.Add(New vw_maestroProductoDataTable(ds.Tables("vw_maestroProducto")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMaestroProducto_cargador = CType(MyBase.Tables("MaestroProducto_cargador"),MaestroProducto_cargadorDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMaestroProducto_cargador) Is Nothing) Then
                Me.tableMaestroProducto_cargador.InitVars
            End If
        End If
        Me.tablesp_InsertaMP_cargadorDinamico = CType(MyBase.Tables("sp_InsertaMP_cargadorDinamico"),sp_InsertaMP_cargadorDinamicoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_InsertaMP_cargadorDinamico) Is Nothing) Then
                Me.tablesp_InsertaMP_cargadorDinamico.InitVars
            End If
        End If
        Me.tablesp_actualiza_MaestroProducto_STEP = CType(MyBase.Tables("sp_actualiza_MaestroProducto_STEP"),sp_actualiza_MaestroProducto_STEPDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_actualiza_MaestroProducto_STEP) Is Nothing) Then
                Me.tablesp_actualiza_MaestroProducto_STEP.InitVars
            End If
        End If
        Me.tablesp_carga_MaestroProducto_STEP = CType(MyBase.Tables("sp_carga_MaestroProducto_STEP"),sp_carga_MaestroProducto_STEPDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_carga_MaestroProducto_STEP) Is Nothing) Then
                Me.tablesp_carga_MaestroProducto_STEP.InitVars
            End If
        End If
        Me.tablevw_pos_producto_agrupacion = CType(MyBase.Tables("vw_pos_producto_agrupacion"),vw_pos_producto_agrupacionDataTable)
        If (initTable = true) Then
            If (Not (Me.tablevw_pos_producto_agrupacion) Is Nothing) Then
                Me.tablevw_pos_producto_agrupacion.InitVars
            End If
        End If
        Me.tablemaestroProducto_paisOrigen = CType(MyBase.Tables("maestroProducto_paisOrigen"),maestroProducto_paisOrigenDataTable)
        If (initTable = true) Then
            If (Not (Me.tablemaestroProducto_paisOrigen) Is Nothing) Then
                Me.tablemaestroProducto_paisOrigen.InitVars
            End If
        End If
        Me.tablevw_maestroProducto = CType(MyBase.Tables("vw_maestroProducto"),vw_maestroProductoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablevw_maestroProducto) Is Nothing) Then
                Me.tablevw_maestroProducto.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Gestion"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Gestion.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMaestroProducto_cargador = New MaestroProducto_cargadorDataTable
        MyBase.Tables.Add(Me.tableMaestroProducto_cargador)
        Me.tablesp_InsertaMP_cargadorDinamico = New sp_InsertaMP_cargadorDinamicoDataTable
        MyBase.Tables.Add(Me.tablesp_InsertaMP_cargadorDinamico)
        Me.tablesp_actualiza_MaestroProducto_STEP = New sp_actualiza_MaestroProducto_STEPDataTable
        MyBase.Tables.Add(Me.tablesp_actualiza_MaestroProducto_STEP)
        Me.tablesp_carga_MaestroProducto_STEP = New sp_carga_MaestroProducto_STEPDataTable
        MyBase.Tables.Add(Me.tablesp_carga_MaestroProducto_STEP)
        Me.tablevw_pos_producto_agrupacion = New vw_pos_producto_agrupacionDataTable
        MyBase.Tables.Add(Me.tablevw_pos_producto_agrupacion)
        Me.tablemaestroProducto_paisOrigen = New maestroProducto_paisOrigenDataTable
        MyBase.Tables.Add(Me.tablemaestroProducto_paisOrigen)
        Me.tablevw_maestroProducto = New vw_maestroProductoDataTable
        MyBase.Tables.Add(Me.tablevw_maestroProducto)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMaestroProducto_cargador() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_InsertaMP_cargadorDinamico() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_actualiza_MaestroProducto_STEP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_carga_MaestroProducto_STEP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevw_pos_producto_agrupacion() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializemaestroProducto_paisOrigen() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevw_maestroProducto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Gestion = New Gestion
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub MaestroProducto_cargadorRowChangeEventHandler(ByVal sender As Object, ByVal e As MaestroProducto_cargadorRowChangeEvent)
    
    Public Delegate Sub sp_InsertaMP_cargadorDinamicoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_InsertaMP_cargadorDinamicoRowChangeEvent)
    
    Public Delegate Sub sp_actualiza_MaestroProducto_STEPRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_actualiza_MaestroProducto_STEPRowChangeEvent)
    
    Public Delegate Sub sp_carga_MaestroProducto_STEPRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_carga_MaestroProducto_STEPRowChangeEvent)
    
    Public Delegate Sub vw_pos_producto_agrupacionRowChangeEventHandler(ByVal sender As Object, ByVal e As vw_pos_producto_agrupacionRowChangeEvent)
    
    Public Delegate Sub maestroProducto_paisOrigenRowChangeEventHandler(ByVal sender As Object, ByVal e As maestroProducto_paisOrigenRowChangeEvent)
    
    Public Delegate Sub vw_maestroProductoRowChangeEventHandler(ByVal sender As Object, ByVal e As vw_maestroProductoRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MaestroProducto_cargadorDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnlogin As Global.System.Data.DataColumn
        
        Private columnfila As Global.System.Data.DataColumn
        
        Private columnSKU As Global.System.Data.DataColumn
        
        Private columndescripcionInterna As Global.System.Data.DataColumn
        
        Private columndescripcionVenta As Global.System.Data.DataColumn
        
        Private columntipoProducto As Global.System.Data.DataColumn
        
        Private columnestado As Global.System.Data.DataColumn
        
        Private columncodFamilia As Global.System.Data.DataColumn
        
        Private columncodCategoria As Global.System.Data.DataColumn
        
        Private columncodSubCategoria As Global.System.Data.DataColumn
        
        Private columncodRelacionado As Global.System.Data.DataColumn
        
        Private columnunidad As Global.System.Data.DataColumn
        
        Private columnunidadMedida As Global.System.Data.DataColumn
        
        Private columnunidadMedidaConv As Global.System.Data.DataColumn
        
        Private columnunidadCompra As Global.System.Data.DataColumn
        
        Private columnunidadCompraConv As Global.System.Data.DataColumn
        
        Private columnunidadLogistica As Global.System.Data.DataColumn
        
        Private columnunidadLogisticaConv As Global.System.Data.DataColumn
        
        Private columnunidadEstadistica As Global.System.Data.DataColumn
        
        Private columnunidadEstadisticaConv As Global.System.Data.DataColumn
        
        Private columncodigoBarra As Global.System.Data.DataColumn
        
        Private columncodigoCompra As Global.System.Data.DataColumn
        
        Private columncodigoFabricante As Global.System.Data.DataColumn
        
        Private columncodigoAutoplanet As Global.System.Data.DataColumn
        
        Private columndescIngles As Global.System.Data.DataColumn
        
        Private columntipoMaterial As Global.System.Data.DataColumn
        
        Private columnsubagrupacion As Global.System.Data.DataColumn
        
        Private columnpaisOrigen As Global.System.Data.DataColumn
        
        Private columntipoCodigo As Global.System.Data.DataColumn
        
        Private columnlistaPrecioNormal As Global.System.Data.DataColumn
        
        Private columnlistaPrecioPersonal As Global.System.Data.DataColumn
        
        Private columnlistaPrecio06 As Global.System.Data.DataColumn
        
        Private columnprecioMerma As Global.System.Data.DataColumn
        
        Private columnprecioDevolucion As Global.System.Data.DataColumn
        
        Private columnIVA As Global.System.Data.DataColumn
        
        Private columnstockSeguridad As Global.System.Data.DataColumn
        
        Private columnestacionalidad As Global.System.Data.DataColumn
        
        Private columnsobreStock As Global.System.Data.DataColumn
        
        Private columnminPlanograma As Global.System.Data.DataColumn
        
        Private columnMaxPlanograma As Global.System.Data.DataColumn
        
        Private columntamanoEstuche As Global.System.Data.DataColumn
        
        Private columntamanoPack As Global.System.Data.DataColumn
        
        Private columnimpRetail As Global.System.Data.DataColumn
        
        Private columncantPorAuto As Global.System.Data.DataColumn
        
        Private columnorigReabas As Global.System.Data.DataColumn
        
        Private columnpeso As Global.System.Data.DataColumn
        
        Private columnfabricante As Global.System.Data.DataColumn
        
        Private columnresponsable As Global.System.Data.DataColumn
        
        Private columnextension As Global.System.Data.DataColumn
        
        Private columnrutPorDefecto As Global.System.Data.DataColumn
        
        Private columnrut1 As Global.System.Data.DataColumn
        
        Private columncosto1 As Global.System.Data.DataColumn
        
        Private columnCodCompra1 As Global.System.Data.DataColumn
        
        Private columnMOQ1 As Global.System.Data.DataColumn
        
        Private columnrut2 As Global.System.Data.DataColumn
        
        Private columncosto2 As Global.System.Data.DataColumn
        
        Private columncodCompra2 As Global.System.Data.DataColumn
        
        Private columnMOQ2 As Global.System.Data.DataColumn
        
        Private columnrut3 As Global.System.Data.DataColumn
        
        Private columncosto3 As Global.System.Data.DataColumn
        
        Private columncodCompra3 As Global.System.Data.DataColumn
        
        Private columnMOQ3 As Global.System.Data.DataColumn
        
        Private columnrut4 As Global.System.Data.DataColumn
        
        Private columnCosto4 As Global.System.Data.DataColumn
        
        Private columncodCompra4 As Global.System.Data.DataColumn
        
        Private columnMOQ4 As Global.System.Data.DataColumn
        
        Private columnrut5 As Global.System.Data.DataColumn
        
        Private columncosto5 As Global.System.Data.DataColumn
        
        Private columncodCompra5 As Global.System.Data.DataColumn
        
        Private columnMOQ5 As Global.System.Data.DataColumn
        
        Private columnalarmado As Global.System.Data.DataColumn
        
        Private columnetiquetado As Global.System.Data.DataColumn
        
        Private columntraduccion As Global.System.Data.DataColumn
        
        Private columnembolsado As Global.System.Data.DataColumn
        
        Private columnenzunchado As Global.System.Data.DataColumn
        
        Private columnlargo As Global.System.Data.DataColumn
        
        Private columnancho As Global.System.Data.DataColumn
        
        Private columnalto As Global.System.Data.DataColumn
        
        Private columncodigoBarraAlt1 As Global.System.Data.DataColumn
        
        Private columncodigoBarraAlt2 As Global.System.Data.DataColumn
        
        Private columncodigoBarraAlt3 As Global.System.Data.DataColumn
        
        Private columncodigoBarraAlt4 As Global.System.Data.DataColumn
        
        Private columncodigoBarraAlt5 As Global.System.Data.DataColumn
        
        Private columncodigoBarraAlt6 As Global.System.Data.DataColumn
        
        Private columnstockMin1 As Global.System.Data.DataColumn
        
        Private columnstockMax1 As Global.System.Data.DataColumn
        
        Private columnstockMin2 As Global.System.Data.DataColumn
        
        Private columnstockMax2 As Global.System.Data.DataColumn
        
        Private columnstockMin3 As Global.System.Data.DataColumn
        
        Private columnstockMax3 As Global.System.Data.DataColumn
        
        Private columnstockMin4 As Global.System.Data.DataColumn
        
        Private columnstockMax4 As Global.System.Data.DataColumn
        
        Private columnstockMin5 As Global.System.Data.DataColumn
        
        Private columnstockMax5 As Global.System.Data.DataColumn
        
        Private columnstockMin6 As Global.System.Data.DataColumn
        
        Private columnstockMax6 As Global.System.Data.DataColumn
        
        Private columnstockMin7 As Global.System.Data.DataColumn
        
        Private columnstockMax7 As Global.System.Data.DataColumn
        
        Private columnstockMin8 As Global.System.Data.DataColumn
        
        Private columnstockMax8 As Global.System.Data.DataColumn
        
        Private columnstockMin9 As Global.System.Data.DataColumn
        
        Private columnstockMax9 As Global.System.Data.DataColumn
        
        Private columnstockMin10 As Global.System.Data.DataColumn
        
        Private columnstockMax10 As Global.System.Data.DataColumn
        
        Private columnstockMin11 As Global.System.Data.DataColumn
        
        Private columnstockMax11 As Global.System.Data.DataColumn
        
        Private columnstockMin12 As Global.System.Data.DataColumn
        
        Private columnStockMax12 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MaestroProducto_cargador"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property loginColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlogin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property filaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfila
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionInternaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescripcionInterna
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionVentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescripcionVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipoProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codFamiliaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodFamilia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codCategoriaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodCategoria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codSubCategoriaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodSubCategoria
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codRelacionadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodRelacionado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadMedidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidadMedida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadMedidaConvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidadMedidaConv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadCompraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidadCompra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadCompraConvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidadCompraConv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadLogisticaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidadLogistica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadLogisticaConvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidadLogisticaConv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadEstadisticaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidadEstadistica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidadEstadisticaConvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidadEstadisticaConv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoBarraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigoBarra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoCompraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigoCompra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoFabricanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigoFabricante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoAutoplanetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigoAutoplanet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descInglesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescIngles
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoMaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipoMaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subagrupacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubagrupacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paisOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpaisOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoCodigoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipoCodigo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property listaPrecioNormalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlistaPrecioNormal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property listaPrecioPersonalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlistaPrecioPersonal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property listaPrecio06Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlistaPrecio06
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property precioMermaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprecioMerma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property precioDevolucionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprecioDevolucion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockSeguridadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockSeguridad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estacionalidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestacionalidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sobreStockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsobreStock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property minPlanogramaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnminPlanograma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxPlanogramaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxPlanograma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tamanoEstucheColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntamanoEstuche
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tamanoPackColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntamanoPack
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property impRetailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimpRetail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantPorAutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncantPorAuto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property origReabasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnorigReabas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpeso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fabricanteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfabricante
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property responsableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnresponsable
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property extensionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnextension
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rutPorDefectoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrutPorDefecto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rut1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrut1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property costo1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncosto1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodCompra1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodCompra1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOQ1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOQ1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rut2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrut2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property costo2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncosto2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codCompra2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncodCompra2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOQ2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOQ2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rut3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrut3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property costo3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncosto3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codCompra3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncodCompra3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOQ3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOQ3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rut4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrut4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Costo4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCosto4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codCompra4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncodCompra4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOQ4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOQ4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rut5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrut5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property costo5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncosto5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codCompra5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncodCompra5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOQ5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOQ5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alarmadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalarmado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property etiquetadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnetiquetado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property traduccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntraduccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property embolsadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnembolsado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property enzunchadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnenzunchado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property largoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlargo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property anchoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnancho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property altoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoBarraAlt1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigoBarraAlt1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoBarraAlt2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigoBarraAlt2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoBarraAlt3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigoBarraAlt3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoBarraAlt4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigoBarraAlt4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoBarraAlt5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigoBarraAlt5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigoBarraAlt6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigoBarraAlt6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMin1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMin1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMax1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMax1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMin2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMin2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMax2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMax2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMin3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMin3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMax3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMax3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMin4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMin4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMax4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMax4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMin5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMin5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMax5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMax5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMin6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMin6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMax6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMax6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMin7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMin7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMax7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMax7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMin8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMin8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMax8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMax8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMin9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMin9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMax9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMax9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMin10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMin10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMax10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMax10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMin11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMin11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMax11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMax11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stockMin12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnstockMin12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StockMax12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnStockMax12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MaestroProducto_cargadorRow
            Get
                Return CType(Me.Rows(index),MaestroProducto_cargadorRow)
            End Get
        End Property
        
        Public Event MaestroProducto_cargadorRowChanging As MaestroProducto_cargadorRowChangeEventHandler
        
        Public Event MaestroProducto_cargadorRowChanged As MaestroProducto_cargadorRowChangeEventHandler
        
        Public Event MaestroProducto_cargadorRowDeleting As MaestroProducto_cargadorRowChangeEventHandler
        
        Public Event MaestroProducto_cargadorRowDeleted As MaestroProducto_cargadorRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMaestroProducto_cargadorRow(ByVal row As MaestroProducto_cargadorRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMaestroProducto_cargadorRow( _
                    ByVal login As String,  _
                    ByVal fila As Long,  _
                    ByVal SKU As String,  _
                    ByVal descripcionInterna As String,  _
                    ByVal descripcionVenta As String,  _
                    ByVal tipoProducto As String,  _
                    ByVal estado As String,  _
                    ByVal codFamilia As String,  _
                    ByVal codCategoria As String,  _
                    ByVal codSubCategoria As String,  _
                    ByVal codRelacionado As String,  _
                    ByVal unidad As String,  _
                    ByVal unidadMedida As String,  _
                    ByVal unidadMedidaConv As String,  _
                    ByVal unidadCompra As String,  _
                    ByVal unidadCompraConv As String,  _
                    ByVal unidadLogistica As String,  _
                    ByVal unidadLogisticaConv As String,  _
                    ByVal unidadEstadistica As String,  _
                    ByVal unidadEstadisticaConv As String,  _
                    ByVal codigoBarra As String,  _
                    ByVal codigoCompra As String,  _
                    ByVal codigoFabricante As String,  _
                    ByVal codigoAutoplanet As String,  _
                    ByVal descIngles As String,  _
                    ByVal tipoMaterial As String,  _
                    ByVal subagrupacion As String,  _
                    ByVal paisOrigen As String,  _
                    ByVal tipoCodigo As String,  _
                    ByVal listaPrecioNormal As String,  _
                    ByVal listaPrecioPersonal As String,  _
                    ByVal listaPrecio06 As String,  _
                    ByVal precioMerma As String,  _
                    ByVal precioDevolucion As String,  _
                    ByVal IVA As String,  _
                    ByVal stockSeguridad As String,  _
                    ByVal estacionalidad As String,  _
                    ByVal sobreStock As String,  _
                    ByVal minPlanograma As String,  _
                    ByVal MaxPlanograma As String,  _
                    ByVal tamanoEstuche As String,  _
                    ByVal tamanoPack As String,  _
                    ByVal impRetail As String,  _
                    ByVal cantPorAuto As String,  _
                    ByVal origReabas As String,  _
                    ByVal peso As String,  _
                    ByVal fabricante As String,  _
                    ByVal responsable As String,  _
                    ByVal extension As String,  _
                    ByVal rutPorDefecto As String,  _
                    ByVal rut1 As String,  _
                    ByVal costo1 As String,  _
                    ByVal CodCompra1 As String,  _
                    ByVal MOQ1 As String,  _
                    ByVal rut2 As String,  _
                    ByVal costo2 As String,  _
                    ByVal codCompra2 As String,  _
                    ByVal MOQ2 As String,  _
                    ByVal rut3 As String,  _
                    ByVal costo3 As String,  _
                    ByVal codCompra3 As String,  _
                    ByVal MOQ3 As String,  _
                    ByVal rut4 As String,  _
                    ByVal Costo4 As String,  _
                    ByVal codCompra4 As String,  _
                    ByVal MOQ4 As String,  _
                    ByVal rut5 As String,  _
                    ByVal costo5 As String,  _
                    ByVal codCompra5 As String,  _
                    ByVal MOQ5 As String,  _
                    ByVal alarmado As String,  _
                    ByVal etiquetado As String,  _
                    ByVal traduccion As String,  _
                    ByVal embolsado As String,  _
                    ByVal enzunchado As String,  _
                    ByVal largo As String,  _
                    ByVal ancho As String,  _
                    ByVal alto As String,  _
                    ByVal codigoBarraAlt1 As String,  _
                    ByVal codigoBarraAlt2 As String,  _
                    ByVal codigoBarraAlt3 As String,  _
                    ByVal codigoBarraAlt4 As String,  _
                    ByVal codigoBarraAlt5 As String,  _
                    ByVal codigoBarraAlt6 As String,  _
                    ByVal stockMin1 As String,  _
                    ByVal stockMax1 As String,  _
                    ByVal stockMin2 As String,  _
                    ByVal stockMax2 As String,  _
                    ByVal stockMin3 As String,  _
                    ByVal stockMax3 As String,  _
                    ByVal stockMin4 As String,  _
                    ByVal stockMax4 As String,  _
                    ByVal stockMin5 As String,  _
                    ByVal stockMax5 As String,  _
                    ByVal stockMin6 As String,  _
                    ByVal stockMax6 As String,  _
                    ByVal stockMin7 As String,  _
                    ByVal stockMax7 As String,  _
                    ByVal stockMin8 As String,  _
                    ByVal stockMax8 As String,  _
                    ByVal stockMin9 As String,  _
                    ByVal stockMax9 As String,  _
                    ByVal stockMin10 As String,  _
                    ByVal stockMax10 As String,  _
                    ByVal stockMin11 As String,  _
                    ByVal stockMax11 As String,  _
                    ByVal stockMin12 As String,  _
                    ByVal StockMax12 As String) As MaestroProducto_cargadorRow
            Dim rowMaestroProducto_cargadorRow As MaestroProducto_cargadorRow = CType(Me.NewRow,MaestroProducto_cargadorRow)
            Dim columnValuesArray() As Object = New Object() {login, fila, SKU, descripcionInterna, descripcionVenta, tipoProducto, estado, codFamilia, codCategoria, codSubCategoria, codRelacionado, unidad, unidadMedida, unidadMedidaConv, unidadCompra, unidadCompraConv, unidadLogistica, unidadLogisticaConv, unidadEstadistica, unidadEstadisticaConv, codigoBarra, codigoCompra, codigoFabricante, codigoAutoplanet, descIngles, tipoMaterial, subagrupacion, paisOrigen, tipoCodigo, listaPrecioNormal, listaPrecioPersonal, listaPrecio06, precioMerma, precioDevolucion, IVA, stockSeguridad, estacionalidad, sobreStock, minPlanograma, MaxPlanograma, tamanoEstuche, tamanoPack, impRetail, cantPorAuto, origReabas, peso, fabricante, responsable, extension, rutPorDefecto, rut1, costo1, CodCompra1, MOQ1, rut2, costo2, codCompra2, MOQ2, rut3, costo3, codCompra3, MOQ3, rut4, Costo4, codCompra4, MOQ4, rut5, costo5, codCompra5, MOQ5, alarmado, etiquetado, traduccion, embolsado, enzunchado, largo, ancho, alto, codigoBarraAlt1, codigoBarraAlt2, codigoBarraAlt3, codigoBarraAlt4, codigoBarraAlt5, codigoBarraAlt6, stockMin1, stockMax1, stockMin2, stockMax2, stockMin3, stockMax3, stockMin4, stockMax4, stockMin5, stockMax5, stockMin6, stockMax6, stockMin7, stockMax7, stockMin8, stockMax8, stockMin9, stockMax9, stockMin10, stockMax10, stockMin11, stockMax11, stockMin12, StockMax12}
            rowMaestroProducto_cargadorRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMaestroProducto_cargadorRow)
            Return rowMaestroProducto_cargadorRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MaestroProducto_cargadorDataTable = CType(MyBase.Clone,MaestroProducto_cargadorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MaestroProducto_cargadorDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnlogin = MyBase.Columns("login")
            Me.columnfila = MyBase.Columns("fila")
            Me.columnSKU = MyBase.Columns("SKU")
            Me.columndescripcionInterna = MyBase.Columns("descripcionInterna")
            Me.columndescripcionVenta = MyBase.Columns("descripcionVenta")
            Me.columntipoProducto = MyBase.Columns("tipoProducto")
            Me.columnestado = MyBase.Columns("estado")
            Me.columncodFamilia = MyBase.Columns("codFamilia")
            Me.columncodCategoria = MyBase.Columns("codCategoria")
            Me.columncodSubCategoria = MyBase.Columns("codSubCategoria")
            Me.columncodRelacionado = MyBase.Columns("codRelacionado")
            Me.columnunidad = MyBase.Columns("unidad")
            Me.columnunidadMedida = MyBase.Columns("unidadMedida")
            Me.columnunidadMedidaConv = MyBase.Columns("unidadMedidaConv")
            Me.columnunidadCompra = MyBase.Columns("unidadCompra")
            Me.columnunidadCompraConv = MyBase.Columns("unidadCompraConv")
            Me.columnunidadLogistica = MyBase.Columns("unidadLogistica")
            Me.columnunidadLogisticaConv = MyBase.Columns("unidadLogisticaConv")
            Me.columnunidadEstadistica = MyBase.Columns("unidadEstadistica")
            Me.columnunidadEstadisticaConv = MyBase.Columns("unidadEstadisticaConv")
            Me.columncodigoBarra = MyBase.Columns("codigoBarra")
            Me.columncodigoCompra = MyBase.Columns("codigoCompra")
            Me.columncodigoFabricante = MyBase.Columns("codigoFabricante")
            Me.columncodigoAutoplanet = MyBase.Columns("codigoAutoplanet")
            Me.columndescIngles = MyBase.Columns("descIngles")
            Me.columntipoMaterial = MyBase.Columns("tipoMaterial")
            Me.columnsubagrupacion = MyBase.Columns("subagrupacion")
            Me.columnpaisOrigen = MyBase.Columns("paisOrigen")
            Me.columntipoCodigo = MyBase.Columns("tipoCodigo")
            Me.columnlistaPrecioNormal = MyBase.Columns("listaPrecioNormal")
            Me.columnlistaPrecioPersonal = MyBase.Columns("listaPrecioPersonal")
            Me.columnlistaPrecio06 = MyBase.Columns("listaPrecio06")
            Me.columnprecioMerma = MyBase.Columns("precioMerma")
            Me.columnprecioDevolucion = MyBase.Columns("precioDevolucion")
            Me.columnIVA = MyBase.Columns("IVA")
            Me.columnstockSeguridad = MyBase.Columns("stockSeguridad")
            Me.columnestacionalidad = MyBase.Columns("estacionalidad")
            Me.columnsobreStock = MyBase.Columns("sobreStock")
            Me.columnminPlanograma = MyBase.Columns("minPlanograma")
            Me.columnMaxPlanograma = MyBase.Columns("MaxPlanograma")
            Me.columntamanoEstuche = MyBase.Columns("tamanoEstuche")
            Me.columntamanoPack = MyBase.Columns("tamanoPack")
            Me.columnimpRetail = MyBase.Columns("impRetail")
            Me.columncantPorAuto = MyBase.Columns("cantPorAuto")
            Me.columnorigReabas = MyBase.Columns("origReabas")
            Me.columnpeso = MyBase.Columns("peso")
            Me.columnfabricante = MyBase.Columns("fabricante")
            Me.columnresponsable = MyBase.Columns("responsable")
            Me.columnextension = MyBase.Columns("extension")
            Me.columnrutPorDefecto = MyBase.Columns("rutPorDefecto")
            Me.columnrut1 = MyBase.Columns("rut1")
            Me.columncosto1 = MyBase.Columns("costo1")
            Me.columnCodCompra1 = MyBase.Columns("CodCompra1")
            Me.columnMOQ1 = MyBase.Columns("MOQ1")
            Me.columnrut2 = MyBase.Columns("rut2")
            Me.columncosto2 = MyBase.Columns("costo2")
            Me.columncodCompra2 = MyBase.Columns("codCompra2")
            Me.columnMOQ2 = MyBase.Columns("MOQ2")
            Me.columnrut3 = MyBase.Columns("rut3")
            Me.columncosto3 = MyBase.Columns("costo3")
            Me.columncodCompra3 = MyBase.Columns("codCompra3")
            Me.columnMOQ3 = MyBase.Columns("MOQ3")
            Me.columnrut4 = MyBase.Columns("rut4")
            Me.columnCosto4 = MyBase.Columns("Costo4")
            Me.columncodCompra4 = MyBase.Columns("codCompra4")
            Me.columnMOQ4 = MyBase.Columns("MOQ4")
            Me.columnrut5 = MyBase.Columns("rut5")
            Me.columncosto5 = MyBase.Columns("costo5")
            Me.columncodCompra5 = MyBase.Columns("codCompra5")
            Me.columnMOQ5 = MyBase.Columns("MOQ5")
            Me.columnalarmado = MyBase.Columns("alarmado")
            Me.columnetiquetado = MyBase.Columns("etiquetado")
            Me.columntraduccion = MyBase.Columns("traduccion")
            Me.columnembolsado = MyBase.Columns("embolsado")
            Me.columnenzunchado = MyBase.Columns("enzunchado")
            Me.columnlargo = MyBase.Columns("largo")
            Me.columnancho = MyBase.Columns("ancho")
            Me.columnalto = MyBase.Columns("alto")
            Me.columncodigoBarraAlt1 = MyBase.Columns("codigoBarraAlt1")
            Me.columncodigoBarraAlt2 = MyBase.Columns("codigoBarraAlt2")
            Me.columncodigoBarraAlt3 = MyBase.Columns("codigoBarraAlt3")
            Me.columncodigoBarraAlt4 = MyBase.Columns("codigoBarraAlt4")
            Me.columncodigoBarraAlt5 = MyBase.Columns("codigoBarraAlt5")
            Me.columncodigoBarraAlt6 = MyBase.Columns("codigoBarraAlt6")
            Me.columnstockMin1 = MyBase.Columns("stockMin1")
            Me.columnstockMax1 = MyBase.Columns("stockMax1")
            Me.columnstockMin2 = MyBase.Columns("stockMin2")
            Me.columnstockMax2 = MyBase.Columns("stockMax2")
            Me.columnstockMin3 = MyBase.Columns("stockMin3")
            Me.columnstockMax3 = MyBase.Columns("stockMax3")
            Me.columnstockMin4 = MyBase.Columns("stockMin4")
            Me.columnstockMax4 = MyBase.Columns("stockMax4")
            Me.columnstockMin5 = MyBase.Columns("stockMin5")
            Me.columnstockMax5 = MyBase.Columns("stockMax5")
            Me.columnstockMin6 = MyBase.Columns("stockMin6")
            Me.columnstockMax6 = MyBase.Columns("stockMax6")
            Me.columnstockMin7 = MyBase.Columns("stockMin7")
            Me.columnstockMax7 = MyBase.Columns("stockMax7")
            Me.columnstockMin8 = MyBase.Columns("stockMin8")
            Me.columnstockMax8 = MyBase.Columns("stockMax8")
            Me.columnstockMin9 = MyBase.Columns("stockMin9")
            Me.columnstockMax9 = MyBase.Columns("stockMax9")
            Me.columnstockMin10 = MyBase.Columns("stockMin10")
            Me.columnstockMax10 = MyBase.Columns("stockMax10")
            Me.columnstockMin11 = MyBase.Columns("stockMin11")
            Me.columnstockMax11 = MyBase.Columns("stockMax11")
            Me.columnstockMin12 = MyBase.Columns("stockMin12")
            Me.columnStockMax12 = MyBase.Columns("StockMax12")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnlogin = New Global.System.Data.DataColumn("login", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlogin)
            Me.columnfila = New Global.System.Data.DataColumn("fila", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfila)
            Me.columnSKU = New Global.System.Data.DataColumn("SKU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKU)
            Me.columndescripcionInterna = New Global.System.Data.DataColumn("descripcionInterna", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcionInterna)
            Me.columndescripcionVenta = New Global.System.Data.DataColumn("descripcionVenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcionVenta)
            Me.columntipoProducto = New Global.System.Data.DataColumn("tipoProducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipoProducto)
            Me.columnestado = New Global.System.Data.DataColumn("estado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado)
            Me.columncodFamilia = New Global.System.Data.DataColumn("codFamilia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodFamilia)
            Me.columncodCategoria = New Global.System.Data.DataColumn("codCategoria", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodCategoria)
            Me.columncodSubCategoria = New Global.System.Data.DataColumn("codSubCategoria", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodSubCategoria)
            Me.columncodRelacionado = New Global.System.Data.DataColumn("codRelacionado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodRelacionado)
            Me.columnunidad = New Global.System.Data.DataColumn("unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidad)
            Me.columnunidadMedida = New Global.System.Data.DataColumn("unidadMedida", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidadMedida)
            Me.columnunidadMedidaConv = New Global.System.Data.DataColumn("unidadMedidaConv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidadMedidaConv)
            Me.columnunidadCompra = New Global.System.Data.DataColumn("unidadCompra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidadCompra)
            Me.columnunidadCompraConv = New Global.System.Data.DataColumn("unidadCompraConv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidadCompraConv)
            Me.columnunidadLogistica = New Global.System.Data.DataColumn("unidadLogistica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidadLogistica)
            Me.columnunidadLogisticaConv = New Global.System.Data.DataColumn("unidadLogisticaConv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidadLogisticaConv)
            Me.columnunidadEstadistica = New Global.System.Data.DataColumn("unidadEstadistica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidadEstadistica)
            Me.columnunidadEstadisticaConv = New Global.System.Data.DataColumn("unidadEstadisticaConv", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidadEstadisticaConv)
            Me.columncodigoBarra = New Global.System.Data.DataColumn("codigoBarra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigoBarra)
            Me.columncodigoCompra = New Global.System.Data.DataColumn("codigoCompra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigoCompra)
            Me.columncodigoFabricante = New Global.System.Data.DataColumn("codigoFabricante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigoFabricante)
            Me.columncodigoAutoplanet = New Global.System.Data.DataColumn("codigoAutoplanet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigoAutoplanet)
            Me.columndescIngles = New Global.System.Data.DataColumn("descIngles", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescIngles)
            Me.columntipoMaterial = New Global.System.Data.DataColumn("tipoMaterial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipoMaterial)
            Me.columnsubagrupacion = New Global.System.Data.DataColumn("subagrupacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubagrupacion)
            Me.columnpaisOrigen = New Global.System.Data.DataColumn("paisOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpaisOrigen)
            Me.columntipoCodigo = New Global.System.Data.DataColumn("tipoCodigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipoCodigo)
            Me.columnlistaPrecioNormal = New Global.System.Data.DataColumn("listaPrecioNormal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlistaPrecioNormal)
            Me.columnlistaPrecioPersonal = New Global.System.Data.DataColumn("listaPrecioPersonal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlistaPrecioPersonal)
            Me.columnlistaPrecio06 = New Global.System.Data.DataColumn("listaPrecio06", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlistaPrecio06)
            Me.columnprecioMerma = New Global.System.Data.DataColumn("precioMerma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprecioMerma)
            Me.columnprecioDevolucion = New Global.System.Data.DataColumn("precioDevolucion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprecioDevolucion)
            Me.columnIVA = New Global.System.Data.DataColumn("IVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVA)
            Me.columnstockSeguridad = New Global.System.Data.DataColumn("stockSeguridad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockSeguridad)
            Me.columnestacionalidad = New Global.System.Data.DataColumn("estacionalidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestacionalidad)
            Me.columnsobreStock = New Global.System.Data.DataColumn("sobreStock", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsobreStock)
            Me.columnminPlanograma = New Global.System.Data.DataColumn("minPlanograma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnminPlanograma)
            Me.columnMaxPlanograma = New Global.System.Data.DataColumn("MaxPlanograma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxPlanograma)
            Me.columntamanoEstuche = New Global.System.Data.DataColumn("tamanoEstuche", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntamanoEstuche)
            Me.columntamanoPack = New Global.System.Data.DataColumn("tamanoPack", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntamanoPack)
            Me.columnimpRetail = New Global.System.Data.DataColumn("impRetail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimpRetail)
            Me.columncantPorAuto = New Global.System.Data.DataColumn("cantPorAuto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncantPorAuto)
            Me.columnorigReabas = New Global.System.Data.DataColumn("origReabas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnorigReabas)
            Me.columnpeso = New Global.System.Data.DataColumn("peso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpeso)
            Me.columnfabricante = New Global.System.Data.DataColumn("fabricante", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfabricante)
            Me.columnresponsable = New Global.System.Data.DataColumn("responsable", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnresponsable)
            Me.columnextension = New Global.System.Data.DataColumn("extension", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnextension)
            Me.columnrutPorDefecto = New Global.System.Data.DataColumn("rutPorDefecto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrutPorDefecto)
            Me.columnrut1 = New Global.System.Data.DataColumn("rut1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrut1)
            Me.columncosto1 = New Global.System.Data.DataColumn("costo1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncosto1)
            Me.columnCodCompra1 = New Global.System.Data.DataColumn("CodCompra1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodCompra1)
            Me.columnMOQ1 = New Global.System.Data.DataColumn("MOQ1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOQ1)
            Me.columnrut2 = New Global.System.Data.DataColumn("rut2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrut2)
            Me.columncosto2 = New Global.System.Data.DataColumn("costo2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncosto2)
            Me.columncodCompra2 = New Global.System.Data.DataColumn("codCompra2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodCompra2)
            Me.columnMOQ2 = New Global.System.Data.DataColumn("MOQ2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOQ2)
            Me.columnrut3 = New Global.System.Data.DataColumn("rut3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrut3)
            Me.columncosto3 = New Global.System.Data.DataColumn("costo3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncosto3)
            Me.columncodCompra3 = New Global.System.Data.DataColumn("codCompra3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodCompra3)
            Me.columnMOQ3 = New Global.System.Data.DataColumn("MOQ3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOQ3)
            Me.columnrut4 = New Global.System.Data.DataColumn("rut4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrut4)
            Me.columnCosto4 = New Global.System.Data.DataColumn("Costo4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCosto4)
            Me.columncodCompra4 = New Global.System.Data.DataColumn("codCompra4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodCompra4)
            Me.columnMOQ4 = New Global.System.Data.DataColumn("MOQ4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOQ4)
            Me.columnrut5 = New Global.System.Data.DataColumn("rut5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrut5)
            Me.columncosto5 = New Global.System.Data.DataColumn("costo5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncosto5)
            Me.columncodCompra5 = New Global.System.Data.DataColumn("codCompra5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodCompra5)
            Me.columnMOQ5 = New Global.System.Data.DataColumn("MOQ5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOQ5)
            Me.columnalarmado = New Global.System.Data.DataColumn("alarmado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalarmado)
            Me.columnetiquetado = New Global.System.Data.DataColumn("etiquetado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnetiquetado)
            Me.columntraduccion = New Global.System.Data.DataColumn("traduccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntraduccion)
            Me.columnembolsado = New Global.System.Data.DataColumn("embolsado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnembolsado)
            Me.columnenzunchado = New Global.System.Data.DataColumn("enzunchado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnenzunchado)
            Me.columnlargo = New Global.System.Data.DataColumn("largo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlargo)
            Me.columnancho = New Global.System.Data.DataColumn("ancho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnancho)
            Me.columnalto = New Global.System.Data.DataColumn("alto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalto)
            Me.columncodigoBarraAlt1 = New Global.System.Data.DataColumn("codigoBarraAlt1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigoBarraAlt1)
            Me.columncodigoBarraAlt2 = New Global.System.Data.DataColumn("codigoBarraAlt2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigoBarraAlt2)
            Me.columncodigoBarraAlt3 = New Global.System.Data.DataColumn("codigoBarraAlt3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigoBarraAlt3)
            Me.columncodigoBarraAlt4 = New Global.System.Data.DataColumn("codigoBarraAlt4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigoBarraAlt4)
            Me.columncodigoBarraAlt5 = New Global.System.Data.DataColumn("codigoBarraAlt5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigoBarraAlt5)
            Me.columncodigoBarraAlt6 = New Global.System.Data.DataColumn("codigoBarraAlt6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigoBarraAlt6)
            Me.columnstockMin1 = New Global.System.Data.DataColumn("stockMin1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMin1)
            Me.columnstockMax1 = New Global.System.Data.DataColumn("stockMax1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMax1)
            Me.columnstockMin2 = New Global.System.Data.DataColumn("stockMin2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMin2)
            Me.columnstockMax2 = New Global.System.Data.DataColumn("stockMax2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMax2)
            Me.columnstockMin3 = New Global.System.Data.DataColumn("stockMin3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMin3)
            Me.columnstockMax3 = New Global.System.Data.DataColumn("stockMax3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMax3)
            Me.columnstockMin4 = New Global.System.Data.DataColumn("stockMin4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMin4)
            Me.columnstockMax4 = New Global.System.Data.DataColumn("stockMax4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMax4)
            Me.columnstockMin5 = New Global.System.Data.DataColumn("stockMin5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMin5)
            Me.columnstockMax5 = New Global.System.Data.DataColumn("stockMax5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMax5)
            Me.columnstockMin6 = New Global.System.Data.DataColumn("stockMin6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMin6)
            Me.columnstockMax6 = New Global.System.Data.DataColumn("stockMax6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMax6)
            Me.columnstockMin7 = New Global.System.Data.DataColumn("stockMin7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMin7)
            Me.columnstockMax7 = New Global.System.Data.DataColumn("stockMax7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMax7)
            Me.columnstockMin8 = New Global.System.Data.DataColumn("stockMin8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMin8)
            Me.columnstockMax8 = New Global.System.Data.DataColumn("stockMax8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMax8)
            Me.columnstockMin9 = New Global.System.Data.DataColumn("stockMin9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMin9)
            Me.columnstockMax9 = New Global.System.Data.DataColumn("stockMax9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMax9)
            Me.columnstockMin10 = New Global.System.Data.DataColumn("stockMin10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMin10)
            Me.columnstockMax10 = New Global.System.Data.DataColumn("stockMax10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMax10)
            Me.columnstockMin11 = New Global.System.Data.DataColumn("stockMin11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMin11)
            Me.columnstockMax11 = New Global.System.Data.DataColumn("stockMax11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMax11)
            Me.columnstockMin12 = New Global.System.Data.DataColumn("stockMin12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstockMin12)
            Me.columnStockMax12 = New Global.System.Data.DataColumn("StockMax12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStockMax12)
            Me.columnlogin.MaxLength = 50
            Me.columnfila.AllowDBNull = false
            Me.columnSKU.MaxLength = 50
            Me.columndescripcionInterna.MaxLength = 200
            Me.columndescripcionVenta.MaxLength = 200
            Me.columntipoProducto.MaxLength = 50
            Me.columnestado.MaxLength = 50
            Me.columncodFamilia.MaxLength = 50
            Me.columncodCategoria.MaxLength = 50
            Me.columncodSubCategoria.MaxLength = 50
            Me.columncodRelacionado.MaxLength = 50
            Me.columnunidad.MaxLength = 50
            Me.columnunidadMedida.MaxLength = 50
            Me.columnunidadMedidaConv.MaxLength = 50
            Me.columnunidadCompra.MaxLength = 50
            Me.columnunidadCompraConv.MaxLength = 50
            Me.columnunidadLogistica.MaxLength = 50
            Me.columnunidadLogisticaConv.MaxLength = 50
            Me.columnunidadEstadistica.MaxLength = 50
            Me.columnunidadEstadisticaConv.MaxLength = 50
            Me.columncodigoBarra.MaxLength = 50
            Me.columncodigoCompra.MaxLength = 50
            Me.columncodigoFabricante.MaxLength = 50
            Me.columncodigoAutoplanet.MaxLength = 50
            Me.columndescIngles.MaxLength = 150
            Me.columntipoMaterial.MaxLength = 50
            Me.columnsubagrupacion.MaxLength = 50
            Me.columnpaisOrigen.MaxLength = 50
            Me.columntipoCodigo.MaxLength = 50
            Me.columnlistaPrecioNormal.MaxLength = 50
            Me.columnlistaPrecioPersonal.MaxLength = 50
            Me.columnlistaPrecio06.MaxLength = 50
            Me.columnprecioMerma.MaxLength = 50
            Me.columnprecioDevolucion.MaxLength = 50
            Me.columnIVA.MaxLength = 50
            Me.columnstockSeguridad.MaxLength = 50
            Me.columnestacionalidad.MaxLength = 50
            Me.columnsobreStock.MaxLength = 50
            Me.columnminPlanograma.MaxLength = 50
            Me.columnMaxPlanograma.MaxLength = 50
            Me.columntamanoEstuche.MaxLength = 50
            Me.columntamanoPack.MaxLength = 50
            Me.columnimpRetail.MaxLength = 50
            Me.columncantPorAuto.MaxLength = 50
            Me.columnorigReabas.MaxLength = 200
            Me.columnpeso.MaxLength = 50
            Me.columnfabricante.MaxLength = 50
            Me.columnresponsable.MaxLength = 50
            Me.columnextension.MaxLength = 50
            Me.columnrutPorDefecto.MaxLength = 50
            Me.columnrut1.MaxLength = 50
            Me.columncosto1.MaxLength = 50
            Me.columnCodCompra1.MaxLength = 50
            Me.columnMOQ1.MaxLength = 50
            Me.columnrut2.MaxLength = 50
            Me.columncosto2.MaxLength = 50
            Me.columncodCompra2.MaxLength = 50
            Me.columnMOQ2.MaxLength = 50
            Me.columnrut3.MaxLength = 50
            Me.columncosto3.MaxLength = 50
            Me.columncodCompra3.MaxLength = 50
            Me.columnMOQ3.MaxLength = 50
            Me.columnrut4.MaxLength = 50
            Me.columnCosto4.MaxLength = 50
            Me.columncodCompra4.MaxLength = 50
            Me.columnMOQ4.MaxLength = 50
            Me.columnrut5.MaxLength = 50
            Me.columncosto5.MaxLength = 50
            Me.columncodCompra5.MaxLength = 50
            Me.columnMOQ5.MaxLength = 50
            Me.columnalarmado.MaxLength = 50
            Me.columnetiquetado.MaxLength = 50
            Me.columntraduccion.MaxLength = 50
            Me.columnembolsado.MaxLength = 50
            Me.columnenzunchado.MaxLength = 50
            Me.columnlargo.MaxLength = 50
            Me.columnancho.MaxLength = 50
            Me.columnalto.MaxLength = 50
            Me.columncodigoBarraAlt1.MaxLength = 50
            Me.columncodigoBarraAlt2.MaxLength = 50
            Me.columncodigoBarraAlt3.MaxLength = 50
            Me.columncodigoBarraAlt4.MaxLength = 50
            Me.columncodigoBarraAlt5.MaxLength = 50
            Me.columncodigoBarraAlt6.MaxLength = 50
            Me.columnstockMin1.MaxLength = 100
            Me.columnstockMax1.MaxLength = 100
            Me.columnstockMin2.MaxLength = 100
            Me.columnstockMax2.MaxLength = 100
            Me.columnstockMin3.MaxLength = 100
            Me.columnstockMax3.MaxLength = 100
            Me.columnstockMin4.MaxLength = 100
            Me.columnstockMax4.MaxLength = 100
            Me.columnstockMin5.MaxLength = 100
            Me.columnstockMax5.MaxLength = 100
            Me.columnstockMin6.MaxLength = 100
            Me.columnstockMax6.MaxLength = 100
            Me.columnstockMin7.MaxLength = 100
            Me.columnstockMax7.MaxLength = 100
            Me.columnstockMin8.MaxLength = 100
            Me.columnstockMax8.MaxLength = 100
            Me.columnstockMin9.MaxLength = 100
            Me.columnstockMax9.MaxLength = 100
            Me.columnstockMin10.MaxLength = 200
            Me.columnstockMax10.MaxLength = 200
            Me.columnstockMin11.MaxLength = 200
            Me.columnstockMax11.MaxLength = 200
            Me.columnstockMin12.MaxLength = 200
            Me.columnStockMax12.MaxLength = 200
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMaestroProducto_cargadorRow() As MaestroProducto_cargadorRow
            Return CType(Me.NewRow,MaestroProducto_cargadorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MaestroProducto_cargadorRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MaestroProducto_cargadorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MaestroProducto_cargadorRowChangedEvent) Is Nothing) Then
                RaiseEvent MaestroProducto_cargadorRowChanged(Me, New MaestroProducto_cargadorRowChangeEvent(CType(e.Row,MaestroProducto_cargadorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MaestroProducto_cargadorRowChangingEvent) Is Nothing) Then
                RaiseEvent MaestroProducto_cargadorRowChanging(Me, New MaestroProducto_cargadorRowChangeEvent(CType(e.Row,MaestroProducto_cargadorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MaestroProducto_cargadorRowDeletedEvent) Is Nothing) Then
                RaiseEvent MaestroProducto_cargadorRowDeleted(Me, New MaestroProducto_cargadorRowChangeEvent(CType(e.Row,MaestroProducto_cargadorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MaestroProducto_cargadorRowDeletingEvent) Is Nothing) Then
                RaiseEvent MaestroProducto_cargadorRowDeleting(Me, New MaestroProducto_cargadorRowChangeEvent(CType(e.Row,MaestroProducto_cargadorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMaestroProducto_cargadorRow(ByVal row As MaestroProducto_cargadorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Gestion = New Gestion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MaestroProducto_cargadorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_InsertaMP_cargadorDinamicoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_InsertaMP_cargadorDinamico"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_InsertaMP_cargadorDinamicoRow
            Get
                Return CType(Me.Rows(index),sp_InsertaMP_cargadorDinamicoRow)
            End Get
        End Property
        
        Public Event sp_InsertaMP_cargadorDinamicoRowChanging As sp_InsertaMP_cargadorDinamicoRowChangeEventHandler
        
        Public Event sp_InsertaMP_cargadorDinamicoRowChanged As sp_InsertaMP_cargadorDinamicoRowChangeEventHandler
        
        Public Event sp_InsertaMP_cargadorDinamicoRowDeleting As sp_InsertaMP_cargadorDinamicoRowChangeEventHandler
        
        Public Event sp_InsertaMP_cargadorDinamicoRowDeleted As sp_InsertaMP_cargadorDinamicoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_InsertaMP_cargadorDinamicoRow(ByVal row As sp_InsertaMP_cargadorDinamicoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_InsertaMP_cargadorDinamicoRow() As sp_InsertaMP_cargadorDinamicoRow
            Dim rowsp_InsertaMP_cargadorDinamicoRow As sp_InsertaMP_cargadorDinamicoRow = CType(Me.NewRow,sp_InsertaMP_cargadorDinamicoRow)
            Dim columnValuesArray(-1) As Object
            rowsp_InsertaMP_cargadorDinamicoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_InsertaMP_cargadorDinamicoRow)
            Return rowsp_InsertaMP_cargadorDinamicoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_InsertaMP_cargadorDinamicoDataTable = CType(MyBase.Clone,sp_InsertaMP_cargadorDinamicoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_InsertaMP_cargadorDinamicoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_InsertaMP_cargadorDinamicoRow() As sp_InsertaMP_cargadorDinamicoRow
            Return CType(Me.NewRow,sp_InsertaMP_cargadorDinamicoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_InsertaMP_cargadorDinamicoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_InsertaMP_cargadorDinamicoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_InsertaMP_cargadorDinamicoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_InsertaMP_cargadorDinamicoRowChanged(Me, New sp_InsertaMP_cargadorDinamicoRowChangeEvent(CType(e.Row,sp_InsertaMP_cargadorDinamicoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_InsertaMP_cargadorDinamicoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_InsertaMP_cargadorDinamicoRowChanging(Me, New sp_InsertaMP_cargadorDinamicoRowChangeEvent(CType(e.Row,sp_InsertaMP_cargadorDinamicoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_InsertaMP_cargadorDinamicoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_InsertaMP_cargadorDinamicoRowDeleted(Me, New sp_InsertaMP_cargadorDinamicoRowChangeEvent(CType(e.Row,sp_InsertaMP_cargadorDinamicoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_InsertaMP_cargadorDinamicoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_InsertaMP_cargadorDinamicoRowDeleting(Me, New sp_InsertaMP_cargadorDinamicoRowChangeEvent(CType(e.Row,sp_InsertaMP_cargadorDinamicoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_InsertaMP_cargadorDinamicoRow(ByVal row As sp_InsertaMP_cargadorDinamicoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Gestion = New Gestion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_InsertaMP_cargadorDinamicoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_actualiza_MaestroProducto_STEPDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_actualiza_MaestroProducto_STEP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_actualiza_MaestroProducto_STEPRow
            Get
                Return CType(Me.Rows(index),sp_actualiza_MaestroProducto_STEPRow)
            End Get
        End Property
        
        Public Event sp_actualiza_MaestroProducto_STEPRowChanging As sp_actualiza_MaestroProducto_STEPRowChangeEventHandler
        
        Public Event sp_actualiza_MaestroProducto_STEPRowChanged As sp_actualiza_MaestroProducto_STEPRowChangeEventHandler
        
        Public Event sp_actualiza_MaestroProducto_STEPRowDeleting As sp_actualiza_MaestroProducto_STEPRowChangeEventHandler
        
        Public Event sp_actualiza_MaestroProducto_STEPRowDeleted As sp_actualiza_MaestroProducto_STEPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_actualiza_MaestroProducto_STEPRow(ByVal row As sp_actualiza_MaestroProducto_STEPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_actualiza_MaestroProducto_STEPRow() As sp_actualiza_MaestroProducto_STEPRow
            Dim rowsp_actualiza_MaestroProducto_STEPRow As sp_actualiza_MaestroProducto_STEPRow = CType(Me.NewRow,sp_actualiza_MaestroProducto_STEPRow)
            Dim columnValuesArray(-1) As Object
            rowsp_actualiza_MaestroProducto_STEPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_actualiza_MaestroProducto_STEPRow)
            Return rowsp_actualiza_MaestroProducto_STEPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_actualiza_MaestroProducto_STEPDataTable = CType(MyBase.Clone,sp_actualiza_MaestroProducto_STEPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_actualiza_MaestroProducto_STEPDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_actualiza_MaestroProducto_STEPRow() As sp_actualiza_MaestroProducto_STEPRow
            Return CType(Me.NewRow,sp_actualiza_MaestroProducto_STEPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_actualiza_MaestroProducto_STEPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_actualiza_MaestroProducto_STEPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_actualiza_MaestroProducto_STEPRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_actualiza_MaestroProducto_STEPRowChanged(Me, New sp_actualiza_MaestroProducto_STEPRowChangeEvent(CType(e.Row,sp_actualiza_MaestroProducto_STEPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_actualiza_MaestroProducto_STEPRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_actualiza_MaestroProducto_STEPRowChanging(Me, New sp_actualiza_MaestroProducto_STEPRowChangeEvent(CType(e.Row,sp_actualiza_MaestroProducto_STEPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_actualiza_MaestroProducto_STEPRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_actualiza_MaestroProducto_STEPRowDeleted(Me, New sp_actualiza_MaestroProducto_STEPRowChangeEvent(CType(e.Row,sp_actualiza_MaestroProducto_STEPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_actualiza_MaestroProducto_STEPRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_actualiza_MaestroProducto_STEPRowDeleting(Me, New sp_actualiza_MaestroProducto_STEPRowChangeEvent(CType(e.Row,sp_actualiza_MaestroProducto_STEPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_actualiza_MaestroProducto_STEPRow(ByVal row As sp_actualiza_MaestroProducto_STEPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Gestion = New Gestion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_actualiza_MaestroProducto_STEPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_carga_MaestroProducto_STEPDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_carga_MaestroProducto_STEP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_carga_MaestroProducto_STEPRow
            Get
                Return CType(Me.Rows(index),sp_carga_MaestroProducto_STEPRow)
            End Get
        End Property
        
        Public Event sp_carga_MaestroProducto_STEPRowChanging As sp_carga_MaestroProducto_STEPRowChangeEventHandler
        
        Public Event sp_carga_MaestroProducto_STEPRowChanged As sp_carga_MaestroProducto_STEPRowChangeEventHandler
        
        Public Event sp_carga_MaestroProducto_STEPRowDeleting As sp_carga_MaestroProducto_STEPRowChangeEventHandler
        
        Public Event sp_carga_MaestroProducto_STEPRowDeleted As sp_carga_MaestroProducto_STEPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_carga_MaestroProducto_STEPRow(ByVal row As sp_carga_MaestroProducto_STEPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_carga_MaestroProducto_STEPRow() As sp_carga_MaestroProducto_STEPRow
            Dim rowsp_carga_MaestroProducto_STEPRow As sp_carga_MaestroProducto_STEPRow = CType(Me.NewRow,sp_carga_MaestroProducto_STEPRow)
            Dim columnValuesArray(-1) As Object
            rowsp_carga_MaestroProducto_STEPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_carga_MaestroProducto_STEPRow)
            Return rowsp_carga_MaestroProducto_STEPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_carga_MaestroProducto_STEPDataTable = CType(MyBase.Clone,sp_carga_MaestroProducto_STEPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_carga_MaestroProducto_STEPDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_carga_MaestroProducto_STEPRow() As sp_carga_MaestroProducto_STEPRow
            Return CType(Me.NewRow,sp_carga_MaestroProducto_STEPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_carga_MaestroProducto_STEPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_carga_MaestroProducto_STEPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_carga_MaestroProducto_STEPRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_carga_MaestroProducto_STEPRowChanged(Me, New sp_carga_MaestroProducto_STEPRowChangeEvent(CType(e.Row,sp_carga_MaestroProducto_STEPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_carga_MaestroProducto_STEPRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_carga_MaestroProducto_STEPRowChanging(Me, New sp_carga_MaestroProducto_STEPRowChangeEvent(CType(e.Row,sp_carga_MaestroProducto_STEPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_carga_MaestroProducto_STEPRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_carga_MaestroProducto_STEPRowDeleted(Me, New sp_carga_MaestroProducto_STEPRowChangeEvent(CType(e.Row,sp_carga_MaestroProducto_STEPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_carga_MaestroProducto_STEPRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_carga_MaestroProducto_STEPRowDeleting(Me, New sp_carga_MaestroProducto_STEPRowChangeEvent(CType(e.Row,sp_carga_MaestroProducto_STEPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_carga_MaestroProducto_STEPRow(ByVal row As sp_carga_MaestroProducto_STEPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Gestion = New Gestion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_carga_MaestroProducto_STEPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vw_pos_producto_agrupacionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTIPAGR As Global.System.Data.DataColumn
        
        Private columnCODAGR As Global.System.Data.DataColumn
        
        Private columnDESAGR As Global.System.Data.DataColumn
        
        Private columnAGAAGR As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vw_pos_producto_agrupacion"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPAGRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPAGR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODAGRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODAGR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESAGRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESAGR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AGAAGRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAGAAGR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vw_pos_producto_agrupacionRow
            Get
                Return CType(Me.Rows(index),vw_pos_producto_agrupacionRow)
            End Get
        End Property
        
        Public Event vw_pos_producto_agrupacionRowChanging As vw_pos_producto_agrupacionRowChangeEventHandler
        
        Public Event vw_pos_producto_agrupacionRowChanged As vw_pos_producto_agrupacionRowChangeEventHandler
        
        Public Event vw_pos_producto_agrupacionRowDeleting As vw_pos_producto_agrupacionRowChangeEventHandler
        
        Public Event vw_pos_producto_agrupacionRowDeleted As vw_pos_producto_agrupacionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addvw_pos_producto_agrupacionRow(ByVal row As vw_pos_producto_agrupacionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addvw_pos_producto_agrupacionRow(ByVal TIPAGR As String, ByVal CODAGR As String, ByVal DESAGR As String, ByVal AGAAGR As String) As vw_pos_producto_agrupacionRow
            Dim rowvw_pos_producto_agrupacionRow As vw_pos_producto_agrupacionRow = CType(Me.NewRow,vw_pos_producto_agrupacionRow)
            Dim columnValuesArray() As Object = New Object() {TIPAGR, CODAGR, DESAGR, AGAAGR}
            rowvw_pos_producto_agrupacionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowvw_pos_producto_agrupacionRow)
            Return rowvw_pos_producto_agrupacionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTIPAGRCODAGR(ByVal TIPAGR As String, ByVal CODAGR As String) As vw_pos_producto_agrupacionRow
            Return CType(Me.Rows.Find(New Object() {TIPAGR, CODAGR}),vw_pos_producto_agrupacionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As vw_pos_producto_agrupacionDataTable = CType(MyBase.Clone,vw_pos_producto_agrupacionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New vw_pos_producto_agrupacionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTIPAGR = MyBase.Columns("TIPAGR")
            Me.columnCODAGR = MyBase.Columns("CODAGR")
            Me.columnDESAGR = MyBase.Columns("DESAGR")
            Me.columnAGAAGR = MyBase.Columns("AGAAGR")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTIPAGR = New Global.System.Data.DataColumn("TIPAGR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPAGR)
            Me.columnCODAGR = New Global.System.Data.DataColumn("CODAGR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODAGR)
            Me.columnDESAGR = New Global.System.Data.DataColumn("DESAGR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESAGR)
            Me.columnAGAAGR = New Global.System.Data.DataColumn("AGAAGR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAGAAGR)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTIPAGR, Me.columnCODAGR}, true))
            Me.columnTIPAGR.AllowDBNull = false
            Me.columnTIPAGR.MaxLength = 6
            Me.columnCODAGR.AllowDBNull = false
            Me.columnCODAGR.MaxLength = 6
            Me.columnDESAGR.AllowDBNull = false
            Me.columnDESAGR.MaxLength = 50
            Me.columnAGAAGR.AllowDBNull = false
            Me.columnAGAAGR.MaxLength = 6
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newvw_pos_producto_agrupacionRow() As vw_pos_producto_agrupacionRow
            Return CType(Me.NewRow,vw_pos_producto_agrupacionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New vw_pos_producto_agrupacionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(vw_pos_producto_agrupacionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vw_pos_producto_agrupacionRowChangedEvent) Is Nothing) Then
                RaiseEvent vw_pos_producto_agrupacionRowChanged(Me, New vw_pos_producto_agrupacionRowChangeEvent(CType(e.Row,vw_pos_producto_agrupacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vw_pos_producto_agrupacionRowChangingEvent) Is Nothing) Then
                RaiseEvent vw_pos_producto_agrupacionRowChanging(Me, New vw_pos_producto_agrupacionRowChangeEvent(CType(e.Row,vw_pos_producto_agrupacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vw_pos_producto_agrupacionRowDeletedEvent) Is Nothing) Then
                RaiseEvent vw_pos_producto_agrupacionRowDeleted(Me, New vw_pos_producto_agrupacionRowChangeEvent(CType(e.Row,vw_pos_producto_agrupacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vw_pos_producto_agrupacionRowDeletingEvent) Is Nothing) Then
                RaiseEvent vw_pos_producto_agrupacionRowDeleting(Me, New vw_pos_producto_agrupacionRowChangeEvent(CType(e.Row,vw_pos_producto_agrupacionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removevw_pos_producto_agrupacionRow(ByVal row As vw_pos_producto_agrupacionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Gestion = New Gestion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vw_pos_producto_agrupacionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class maestroProducto_paisOrigenDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIdPaisOrigen As Global.System.Data.DataColumn
        
        Private columnDesPaisOrigen As Global.System.Data.DataColumn
        
        Private columnCodSap As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "maestroProducto_paisOrigen"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdPaisOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdPaisOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DesPaisOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesPaisOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSapColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodSap
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As maestroProducto_paisOrigenRow
            Get
                Return CType(Me.Rows(index),maestroProducto_paisOrigenRow)
            End Get
        End Property
        
        Public Event maestroProducto_paisOrigenRowChanging As maestroProducto_paisOrigenRowChangeEventHandler
        
        Public Event maestroProducto_paisOrigenRowChanged As maestroProducto_paisOrigenRowChangeEventHandler
        
        Public Event maestroProducto_paisOrigenRowDeleting As maestroProducto_paisOrigenRowChangeEventHandler
        
        Public Event maestroProducto_paisOrigenRowDeleted As maestroProducto_paisOrigenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddmaestroProducto_paisOrigenRow(ByVal row As maestroProducto_paisOrigenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddmaestroProducto_paisOrigenRow(ByVal DesPaisOrigen As String, ByVal CodSap As String) As maestroProducto_paisOrigenRow
            Dim rowmaestroProducto_paisOrigenRow As maestroProducto_paisOrigenRow = CType(Me.NewRow,maestroProducto_paisOrigenRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, DesPaisOrigen, CodSap}
            rowmaestroProducto_paisOrigenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowmaestroProducto_paisOrigenRow)
            Return rowmaestroProducto_paisOrigenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIdPaisOrigen(ByVal IdPaisOrigen As Integer) As maestroProducto_paisOrigenRow
            Return CType(Me.Rows.Find(New Object() {IdPaisOrigen}),maestroProducto_paisOrigenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As maestroProducto_paisOrigenDataTable = CType(MyBase.Clone,maestroProducto_paisOrigenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New maestroProducto_paisOrigenDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdPaisOrigen = MyBase.Columns("IdPaisOrigen")
            Me.columnDesPaisOrigen = MyBase.Columns("DesPaisOrigen")
            Me.columnCodSap = MyBase.Columns("CodSap")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdPaisOrigen = New Global.System.Data.DataColumn("IdPaisOrigen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdPaisOrigen)
            Me.columnDesPaisOrigen = New Global.System.Data.DataColumn("DesPaisOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesPaisOrigen)
            Me.columnCodSap = New Global.System.Data.DataColumn("CodSap", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSap)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIdPaisOrigen}, true))
            Me.columnIdPaisOrigen.AutoIncrement = true
            Me.columnIdPaisOrigen.AutoIncrementSeed = -1
            Me.columnIdPaisOrigen.AutoIncrementStep = -1
            Me.columnIdPaisOrigen.AllowDBNull = false
            Me.columnIdPaisOrigen.ReadOnly = true
            Me.columnIdPaisOrigen.Unique = true
            Me.columnDesPaisOrigen.MaxLength = 50
            Me.columnCodSap.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewmaestroProducto_paisOrigenRow() As maestroProducto_paisOrigenRow
            Return CType(Me.NewRow,maestroProducto_paisOrigenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New maestroProducto_paisOrigenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(maestroProducto_paisOrigenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.maestroProducto_paisOrigenRowChangedEvent) Is Nothing) Then
                RaiseEvent maestroProducto_paisOrigenRowChanged(Me, New maestroProducto_paisOrigenRowChangeEvent(CType(e.Row,maestroProducto_paisOrigenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.maestroProducto_paisOrigenRowChangingEvent) Is Nothing) Then
                RaiseEvent maestroProducto_paisOrigenRowChanging(Me, New maestroProducto_paisOrigenRowChangeEvent(CType(e.Row,maestroProducto_paisOrigenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.maestroProducto_paisOrigenRowDeletedEvent) Is Nothing) Then
                RaiseEvent maestroProducto_paisOrigenRowDeleted(Me, New maestroProducto_paisOrigenRowChangeEvent(CType(e.Row,maestroProducto_paisOrigenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.maestroProducto_paisOrigenRowDeletingEvent) Is Nothing) Then
                RaiseEvent maestroProducto_paisOrigenRowDeleting(Me, New maestroProducto_paisOrigenRowChangeEvent(CType(e.Row,maestroProducto_paisOrigenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovemaestroProducto_paisOrigenRow(ByVal row As maestroProducto_paisOrigenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Gestion = New Gestion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "maestroProducto_paisOrigenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vw_maestroProductoDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSKU As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vw_maestroProducto"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SKUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSKU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vw_maestroProductoRow
            Get
                Return CType(Me.Rows(index),vw_maestroProductoRow)
            End Get
        End Property
        
        Public Event vw_maestroProductoRowChanging As vw_maestroProductoRowChangeEventHandler
        
        Public Event vw_maestroProductoRowChanged As vw_maestroProductoRowChangeEventHandler
        
        Public Event vw_maestroProductoRowDeleting As vw_maestroProductoRowChangeEventHandler
        
        Public Event vw_maestroProductoRowDeleted As vw_maestroProductoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addvw_maestroProductoRow(ByVal row As vw_maestroProductoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addvw_maestroProductoRow(ByVal SKU As String) As vw_maestroProductoRow
            Dim rowvw_maestroProductoRow As vw_maestroProductoRow = CType(Me.NewRow,vw_maestroProductoRow)
            Dim columnValuesArray() As Object = New Object() {SKU}
            rowvw_maestroProductoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowvw_maestroProductoRow)
            Return rowvw_maestroProductoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySKU(ByVal SKU As String) As vw_maestroProductoRow
            Return CType(Me.Rows.Find(New Object() {SKU}),vw_maestroProductoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As vw_maestroProductoDataTable = CType(MyBase.Clone,vw_maestroProductoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New vw_maestroProductoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSKU = MyBase.Columns("SKU")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSKU = New Global.System.Data.DataColumn("SKU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSKU)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSKU}, true))
            Me.columnSKU.AllowDBNull = false
            Me.columnSKU.Unique = true
            Me.columnSKU.MaxLength = 32
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newvw_maestroProductoRow() As vw_maestroProductoRow
            Return CType(Me.NewRow,vw_maestroProductoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New vw_maestroProductoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(vw_maestroProductoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vw_maestroProductoRowChangedEvent) Is Nothing) Then
                RaiseEvent vw_maestroProductoRowChanged(Me, New vw_maestroProductoRowChangeEvent(CType(e.Row,vw_maestroProductoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vw_maestroProductoRowChangingEvent) Is Nothing) Then
                RaiseEvent vw_maestroProductoRowChanging(Me, New vw_maestroProductoRowChangeEvent(CType(e.Row,vw_maestroProductoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vw_maestroProductoRowDeletedEvent) Is Nothing) Then
                RaiseEvent vw_maestroProductoRowDeleted(Me, New vw_maestroProductoRowChangeEvent(CType(e.Row,vw_maestroProductoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vw_maestroProductoRowDeletingEvent) Is Nothing) Then
                RaiseEvent vw_maestroProductoRowDeleting(Me, New vw_maestroProductoRowChangeEvent(CType(e.Row,vw_maestroProductoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removevw_maestroProductoRow(ByVal row As vw_maestroProductoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Gestion = New Gestion
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vw_maestroProductoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MaestroProducto_cargadorRow
        Inherits Global.System.Data.DataRow
        
        Private tableMaestroProducto_cargador As MaestroProducto_cargadorDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMaestroProducto_cargador = CType(Me.Table,MaestroProducto_cargadorDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property login() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.loginColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'login' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.loginColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fila() As Long
            Get
                Return CType(Me(Me.tableMaestroProducto_cargador.filaColumn),Long)
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.filaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKU() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.SKUColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SKU' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.SKUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcionInterna() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.descripcionInternaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descripcionInterna' de la tabla 'MaestroProducto_cargador"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.descripcionInternaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcionVenta() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.descripcionVentaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descripcionVenta' de la tabla 'MaestroProducto_cargador' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.descripcionVentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipoProducto() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.tipoProductoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tipoProducto' de la tabla 'MaestroProducto_cargador' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.tipoProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.estadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estado' de la tabla 'MaestroProducto_cargador' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.estadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codFamilia() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codFamiliaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codFamilia' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codFamiliaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codCategoria() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codCategoriaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codCategoria' de la tabla 'MaestroProducto_cargador' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codCategoriaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codSubCategoria() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codSubCategoriaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codSubCategoria' de la tabla 'MaestroProducto_cargador' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codSubCategoriaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codRelacionado() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codRelacionadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codRelacionado' de la tabla 'MaestroProducto_cargador' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codRelacionadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.unidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidad' de la tabla 'MaestroProducto_cargador' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.unidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidadMedida() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.unidadMedidaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidadMedida' de la tabla 'MaestroProducto_cargador' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.unidadMedidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidadMedidaConv() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.unidadMedidaConvColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidadMedidaConv' de la tabla 'MaestroProducto_cargador' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.unidadMedidaConvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidadCompra() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.unidadCompraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidadCompra' de la tabla 'MaestroProducto_cargador' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.unidadCompraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidadCompraConv() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.unidadCompraConvColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidadCompraConv' de la tabla 'MaestroProducto_cargador' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.unidadCompraConvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidadLogistica() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.unidadLogisticaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidadLogistica' de la tabla 'MaestroProducto_cargador' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.unidadLogisticaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidadLogisticaConv() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.unidadLogisticaConvColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidadLogisticaConv' de la tabla 'MaestroProducto_cargado"& _ 
                            "r' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.unidadLogisticaConvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidadEstadistica() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.unidadEstadisticaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidadEstadistica' de la tabla 'MaestroProducto_cargador'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.unidadEstadisticaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidadEstadisticaConv() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.unidadEstadisticaConvColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'unidadEstadisticaConv' de la tabla 'MaestroProducto_carga"& _ 
                            "dor' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.unidadEstadisticaConvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigoBarra() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codigoBarraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigoBarra' de la tabla 'MaestroProducto_cargador' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codigoBarraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigoCompra() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codigoCompraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigoCompra' de la tabla 'MaestroProducto_cargador' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codigoCompraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigoFabricante() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codigoFabricanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigoFabricante' de la tabla 'MaestroProducto_cargador' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codigoFabricanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigoAutoplanet() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codigoAutoplanetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigoAutoplanet' de la tabla 'MaestroProducto_cargador' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codigoAutoplanetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descIngles() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.descInglesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descIngles' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.descInglesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipoMaterial() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.tipoMaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tipoMaterial' de la tabla 'MaestroProducto_cargador' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.tipoMaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subagrupacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.subagrupacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'subagrupacion' de la tabla 'MaestroProducto_cargador' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.subagrupacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property paisOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.paisOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'paisOrigen' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.paisOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipoCodigo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.tipoCodigoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tipoCodigo' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.tipoCodigoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property listaPrecioNormal() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.listaPrecioNormalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'listaPrecioNormal' de la tabla 'MaestroProducto_cargador'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.listaPrecioNormalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property listaPrecioPersonal() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.listaPrecioPersonalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'listaPrecioPersonal' de la tabla 'MaestroProducto_cargado"& _ 
                            "r' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.listaPrecioPersonalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property listaPrecio06() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.listaPrecio06Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'listaPrecio06' de la tabla 'MaestroProducto_cargador' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.listaPrecio06Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property precioMerma() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.precioMermaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'precioMerma' de la tabla 'MaestroProducto_cargador' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.precioMermaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property precioDevolucion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.precioDevolucionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'precioDevolucion' de la tabla 'MaestroProducto_cargador' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.precioDevolucionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.IVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IVA' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.IVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockSeguridad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockSeguridadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockSeguridad' de la tabla 'MaestroProducto_cargador' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockSeguridadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estacionalidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.estacionalidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estacionalidad' de la tabla 'MaestroProducto_cargador' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.estacionalidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sobreStock() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.sobreStockColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sobreStock' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.sobreStockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property minPlanograma() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.minPlanogramaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'minPlanograma' de la tabla 'MaestroProducto_cargador' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.minPlanogramaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxPlanograma() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.MaxPlanogramaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MaxPlanograma' de la tabla 'MaestroProducto_cargador' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.MaxPlanogramaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tamanoEstuche() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.tamanoEstucheColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tamanoEstuche' de la tabla 'MaestroProducto_cargador' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.tamanoEstucheColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tamanoPack() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.tamanoPackColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tamanoPack' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.tamanoPackColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property impRetail() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.impRetailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'impRetail' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.impRetailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cantPorAuto() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.cantPorAutoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cantPorAuto' de la tabla 'MaestroProducto_cargador' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.cantPorAutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property origReabas() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.origReabasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'origReabas' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.origReabasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property peso() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.pesoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'peso' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.pesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fabricante() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.fabricanteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fabricante' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.fabricanteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property responsable() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.responsableColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'responsable' de la tabla 'MaestroProducto_cargador' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.responsableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property extension() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.extensionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'extension' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.extensionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rutPorDefecto() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.rutPorDefectoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rutPorDefecto' de la tabla 'MaestroProducto_cargador' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.rutPorDefectoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rut1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.rut1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rut1' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.rut1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property costo1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.costo1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'costo1' de la tabla 'MaestroProducto_cargador' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.costo1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodCompra1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.CodCompra1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodCompra1' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.CodCompra1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOQ1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.MOQ1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MOQ1' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.MOQ1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rut2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.rut2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rut2' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.rut2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property costo2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.costo2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'costo2' de la tabla 'MaestroProducto_cargador' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.costo2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codCompra2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codCompra2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codCompra2' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codCompra2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOQ2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.MOQ2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MOQ2' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.MOQ2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rut3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.rut3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rut3' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.rut3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property costo3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.costo3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'costo3' de la tabla 'MaestroProducto_cargador' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.costo3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codCompra3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codCompra3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codCompra3' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codCompra3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOQ3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.MOQ3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MOQ3' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.MOQ3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rut4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.rut4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rut4' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.rut4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Costo4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.Costo4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Costo4' de la tabla 'MaestroProducto_cargador' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.Costo4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codCompra4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codCompra4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codCompra4' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codCompra4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOQ4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.MOQ4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MOQ4' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.MOQ4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rut5() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.rut5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rut5' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.rut5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property costo5() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.costo5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'costo5' de la tabla 'MaestroProducto_cargador' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.costo5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codCompra5() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codCompra5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codCompra5' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codCompra5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOQ5() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.MOQ5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MOQ5' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.MOQ5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alarmado() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.alarmadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'alarmado' de la tabla 'MaestroProducto_cargador' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.alarmadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property etiquetado() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.etiquetadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'etiquetado' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.etiquetadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property traduccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.traduccionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'traduccion' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.traduccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property embolsado() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.embolsadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'embolsado' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.embolsadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property enzunchado() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.enzunchadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'enzunchado' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.enzunchadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property largo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.largoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'largo' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.largoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ancho() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.anchoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ancho' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.anchoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alto() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.altoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'alto' de la tabla 'MaestroProducto_cargador' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.altoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigoBarraAlt1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codigoBarraAlt1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigoBarraAlt1' de la tabla 'MaestroProducto_cargador' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codigoBarraAlt1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigoBarraAlt2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codigoBarraAlt2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigoBarraAlt2' de la tabla 'MaestroProducto_cargador' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codigoBarraAlt2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigoBarraAlt3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codigoBarraAlt3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigoBarraAlt3' de la tabla 'MaestroProducto_cargador' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codigoBarraAlt3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigoBarraAlt4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codigoBarraAlt4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigoBarraAlt4' de la tabla 'MaestroProducto_cargador' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codigoBarraAlt4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigoBarraAlt5() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codigoBarraAlt5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigoBarraAlt5' de la tabla 'MaestroProducto_cargador' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codigoBarraAlt5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigoBarraAlt6() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.codigoBarraAlt6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigoBarraAlt6' de la tabla 'MaestroProducto_cargador' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.codigoBarraAlt6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMin1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMin1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMin1' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMin1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMax1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMax1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMax1' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMax1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMin2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMin2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMin2' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMin2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMax2() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMax2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMax2' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMax2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMin3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMin3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMin3' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMin3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMax3() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMax3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMax3' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMax3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMin4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMin4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMin4' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMin4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMax4() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMax4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMax4' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMax4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMin5() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMin5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMin5' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMin5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMax5() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMax5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMax5' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMax5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMin6() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMin6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMin6' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMin6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMax6() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMax6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMax6' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMax6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMin7() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMin7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMin7' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMin7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMax7() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMax7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMax7' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMax7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMin8() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMin8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMin8' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMin8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMax8() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMax8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMax8' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMax8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMin9() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMin9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMin9' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMin9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMax9() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMax9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMax9' de la tabla 'MaestroProducto_cargador' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMax9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMin10() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMin10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMin10' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMin10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMax10() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMax10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMax10' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMax10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMin11() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMin11Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMin11' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMin11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMax11() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMax11Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMax11' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMax11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stockMin12() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.stockMin12Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'stockMin12' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.stockMin12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StockMax12() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroProducto_cargador.StockMax12Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'StockMax12' de la tabla 'MaestroProducto_cargador' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroProducto_cargador.StockMax12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsloginNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.loginColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetloginNull()
            Me(Me.tableMaestroProducto_cargador.loginColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSKUNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.SKUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSKUNull()
            Me(Me.tableMaestroProducto_cargador.SKUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripcionInternaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.descripcionInternaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripcionInternaNull()
            Me(Me.tableMaestroProducto_cargador.descripcionInternaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripcionVentaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.descripcionVentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripcionVentaNull()
            Me(Me.tableMaestroProducto_cargador.descripcionVentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoProductoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.tipoProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoProductoNull()
            Me(Me.tableMaestroProducto_cargador.tipoProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.estadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoNull()
            Me(Me.tableMaestroProducto_cargador.estadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodFamiliaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codFamiliaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodFamiliaNull()
            Me(Me.tableMaestroProducto_cargador.codFamiliaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodCategoriaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codCategoriaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodCategoriaNull()
            Me(Me.tableMaestroProducto_cargador.codCategoriaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodSubCategoriaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codSubCategoriaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodSubCategoriaNull()
            Me(Me.tableMaestroProducto_cargador.codSubCategoriaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodRelacionadoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codRelacionadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodRelacionadoNull()
            Me(Me.tableMaestroProducto_cargador.codRelacionadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.unidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadNull()
            Me(Me.tableMaestroProducto_cargador.unidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadMedidaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.unidadMedidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadMedidaNull()
            Me(Me.tableMaestroProducto_cargador.unidadMedidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadMedidaConvNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.unidadMedidaConvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadMedidaConvNull()
            Me(Me.tableMaestroProducto_cargador.unidadMedidaConvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadCompraNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.unidadCompraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadCompraNull()
            Me(Me.tableMaestroProducto_cargador.unidadCompraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadCompraConvNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.unidadCompraConvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadCompraConvNull()
            Me(Me.tableMaestroProducto_cargador.unidadCompraConvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadLogisticaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.unidadLogisticaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadLogisticaNull()
            Me(Me.tableMaestroProducto_cargador.unidadLogisticaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadLogisticaConvNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.unidadLogisticaConvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadLogisticaConvNull()
            Me(Me.tableMaestroProducto_cargador.unidadLogisticaConvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadEstadisticaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.unidadEstadisticaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadEstadisticaNull()
            Me(Me.tableMaestroProducto_cargador.unidadEstadisticaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsunidadEstadisticaConvNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.unidadEstadisticaConvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetunidadEstadisticaConvNull()
            Me(Me.tableMaestroProducto_cargador.unidadEstadisticaConvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoBarraNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codigoBarraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoBarraNull()
            Me(Me.tableMaestroProducto_cargador.codigoBarraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoCompraNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codigoCompraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoCompraNull()
            Me(Me.tableMaestroProducto_cargador.codigoCompraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoFabricanteNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codigoFabricanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoFabricanteNull()
            Me(Me.tableMaestroProducto_cargador.codigoFabricanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoAutoplanetNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codigoAutoplanetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoAutoplanetNull()
            Me(Me.tableMaestroProducto_cargador.codigoAutoplanetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescInglesNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.descInglesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescInglesNull()
            Me(Me.tableMaestroProducto_cargador.descInglesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoMaterialNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.tipoMaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoMaterialNull()
            Me(Me.tableMaestroProducto_cargador.tipoMaterialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubagrupacionNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.subagrupacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubagrupacionNull()
            Me(Me.tableMaestroProducto_cargador.subagrupacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspaisOrigenNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.paisOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpaisOrigenNull()
            Me(Me.tableMaestroProducto_cargador.paisOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoCodigoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.tipoCodigoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoCodigoNull()
            Me(Me.tableMaestroProducto_cargador.tipoCodigoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslistaPrecioNormalNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.listaPrecioNormalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlistaPrecioNormalNull()
            Me(Me.tableMaestroProducto_cargador.listaPrecioNormalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslistaPrecioPersonalNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.listaPrecioPersonalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlistaPrecioPersonalNull()
            Me(Me.tableMaestroProducto_cargador.listaPrecioPersonalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslistaPrecio06Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.listaPrecio06Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlistaPrecio06Null()
            Me(Me.tableMaestroProducto_cargador.listaPrecio06Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprecioMermaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.precioMermaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprecioMermaNull()
            Me(Me.tableMaestroProducto_cargador.precioMermaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprecioDevolucionNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.precioDevolucionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprecioDevolucionNull()
            Me(Me.tableMaestroProducto_cargador.precioDevolucionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVANull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.IVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVANull()
            Me(Me.tableMaestroProducto_cargador.IVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockSeguridadNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockSeguridadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockSeguridadNull()
            Me(Me.tableMaestroProducto_cargador.stockSeguridadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestacionalidadNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.estacionalidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestacionalidadNull()
            Me(Me.tableMaestroProducto_cargador.estacionalidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssobreStockNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.sobreStockColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsobreStockNull()
            Me(Me.tableMaestroProducto_cargador.sobreStockColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsminPlanogramaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.minPlanogramaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetminPlanogramaNull()
            Me(Me.tableMaestroProducto_cargador.minPlanogramaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaxPlanogramaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.MaxPlanogramaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaxPlanogramaNull()
            Me(Me.tableMaestroProducto_cargador.MaxPlanogramaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstamanoEstucheNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.tamanoEstucheColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettamanoEstucheNull()
            Me(Me.tableMaestroProducto_cargador.tamanoEstucheColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstamanoPackNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.tamanoPackColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettamanoPackNull()
            Me(Me.tableMaestroProducto_cargador.tamanoPackColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsimpRetailNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.impRetailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetimpRetailNull()
            Me(Me.tableMaestroProducto_cargador.impRetailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantPorAutoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.cantPorAutoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantPorAutoNull()
            Me(Me.tableMaestroProducto_cargador.cantPorAutoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsorigReabasNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.origReabasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetorigReabasNull()
            Me(Me.tableMaestroProducto_cargador.origReabasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspesoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.pesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpesoNull()
            Me(Me.tableMaestroProducto_cargador.pesoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfabricanteNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.fabricanteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfabricanteNull()
            Me(Me.tableMaestroProducto_cargador.fabricanteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsresponsableNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.responsableColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetresponsableNull()
            Me(Me.tableMaestroProducto_cargador.responsableColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsextensionNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.extensionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetextensionNull()
            Me(Me.tableMaestroProducto_cargador.extensionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrutPorDefectoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.rutPorDefectoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrutPorDefectoNull()
            Me(Me.tableMaestroProducto_cargador.rutPorDefectoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrut1Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.rut1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrut1Null()
            Me(Me.tableMaestroProducto_cargador.rut1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscosto1Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.costo1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcosto1Null()
            Me(Me.tableMaestroProducto_cargador.costo1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodCompra1Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.CodCompra1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodCompra1Null()
            Me(Me.tableMaestroProducto_cargador.CodCompra1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMOQ1Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.MOQ1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMOQ1Null()
            Me(Me.tableMaestroProducto_cargador.MOQ1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrut2Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.rut2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrut2Null()
            Me(Me.tableMaestroProducto_cargador.rut2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscosto2Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.costo2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcosto2Null()
            Me(Me.tableMaestroProducto_cargador.costo2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodCompra2Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codCompra2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodCompra2Null()
            Me(Me.tableMaestroProducto_cargador.codCompra2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMOQ2Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.MOQ2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMOQ2Null()
            Me(Me.tableMaestroProducto_cargador.MOQ2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrut3Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.rut3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrut3Null()
            Me(Me.tableMaestroProducto_cargador.rut3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscosto3Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.costo3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcosto3Null()
            Me(Me.tableMaestroProducto_cargador.costo3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodCompra3Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codCompra3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodCompra3Null()
            Me(Me.tableMaestroProducto_cargador.codCompra3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMOQ3Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.MOQ3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMOQ3Null()
            Me(Me.tableMaestroProducto_cargador.MOQ3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrut4Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.rut4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrut4Null()
            Me(Me.tableMaestroProducto_cargador.rut4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCosto4Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.Costo4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCosto4Null()
            Me(Me.tableMaestroProducto_cargador.Costo4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodCompra4Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codCompra4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodCompra4Null()
            Me(Me.tableMaestroProducto_cargador.codCompra4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMOQ4Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.MOQ4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMOQ4Null()
            Me(Me.tableMaestroProducto_cargador.MOQ4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrut5Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.rut5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrut5Null()
            Me(Me.tableMaestroProducto_cargador.rut5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscosto5Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.costo5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcosto5Null()
            Me(Me.tableMaestroProducto_cargador.costo5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodCompra5Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codCompra5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodCompra5Null()
            Me(Me.tableMaestroProducto_cargador.codCompra5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMOQ5Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.MOQ5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMOQ5Null()
            Me(Me.tableMaestroProducto_cargador.MOQ5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsalarmadoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.alarmadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetalarmadoNull()
            Me(Me.tableMaestroProducto_cargador.alarmadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsetiquetadoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.etiquetadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetetiquetadoNull()
            Me(Me.tableMaestroProducto_cargador.etiquetadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstraduccionNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.traduccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettraduccionNull()
            Me(Me.tableMaestroProducto_cargador.traduccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsembolsadoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.embolsadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetembolsadoNull()
            Me(Me.tableMaestroProducto_cargador.embolsadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsenzunchadoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.enzunchadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetenzunchadoNull()
            Me(Me.tableMaestroProducto_cargador.enzunchadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslargoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.largoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlargoNull()
            Me(Me.tableMaestroProducto_cargador.largoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsanchoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.anchoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetanchoNull()
            Me(Me.tableMaestroProducto_cargador.anchoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsaltoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.altoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetaltoNull()
            Me(Me.tableMaestroProducto_cargador.altoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoBarraAlt1Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codigoBarraAlt1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoBarraAlt1Null()
            Me(Me.tableMaestroProducto_cargador.codigoBarraAlt1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoBarraAlt2Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codigoBarraAlt2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoBarraAlt2Null()
            Me(Me.tableMaestroProducto_cargador.codigoBarraAlt2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoBarraAlt3Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codigoBarraAlt3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoBarraAlt3Null()
            Me(Me.tableMaestroProducto_cargador.codigoBarraAlt3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoBarraAlt4Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codigoBarraAlt4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoBarraAlt4Null()
            Me(Me.tableMaestroProducto_cargador.codigoBarraAlt4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoBarraAlt5Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codigoBarraAlt5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoBarraAlt5Null()
            Me(Me.tableMaestroProducto_cargador.codigoBarraAlt5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigoBarraAlt6Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.codigoBarraAlt6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigoBarraAlt6Null()
            Me(Me.tableMaestroProducto_cargador.codigoBarraAlt6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMin1Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMin1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMin1Null()
            Me(Me.tableMaestroProducto_cargador.stockMin1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMax1Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMax1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMax1Null()
            Me(Me.tableMaestroProducto_cargador.stockMax1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMin2Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMin2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMin2Null()
            Me(Me.tableMaestroProducto_cargador.stockMin2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMax2Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMax2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMax2Null()
            Me(Me.tableMaestroProducto_cargador.stockMax2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMin3Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMin3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMin3Null()
            Me(Me.tableMaestroProducto_cargador.stockMin3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMax3Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMax3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMax3Null()
            Me(Me.tableMaestroProducto_cargador.stockMax3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMin4Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMin4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMin4Null()
            Me(Me.tableMaestroProducto_cargador.stockMin4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMax4Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMax4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMax4Null()
            Me(Me.tableMaestroProducto_cargador.stockMax4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMin5Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMin5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMin5Null()
            Me(Me.tableMaestroProducto_cargador.stockMin5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMax5Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMax5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMax5Null()
            Me(Me.tableMaestroProducto_cargador.stockMax5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMin6Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMin6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMin6Null()
            Me(Me.tableMaestroProducto_cargador.stockMin6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMax6Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMax6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMax6Null()
            Me(Me.tableMaestroProducto_cargador.stockMax6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMin7Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMin7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMin7Null()
            Me(Me.tableMaestroProducto_cargador.stockMin7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMax7Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMax7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMax7Null()
            Me(Me.tableMaestroProducto_cargador.stockMax7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMin8Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMin8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMin8Null()
            Me(Me.tableMaestroProducto_cargador.stockMin8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMax8Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMax8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMax8Null()
            Me(Me.tableMaestroProducto_cargador.stockMax8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMin9Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMin9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMin9Null()
            Me(Me.tableMaestroProducto_cargador.stockMin9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMax9Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMax9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMax9Null()
            Me(Me.tableMaestroProducto_cargador.stockMax9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMin10Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMin10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMin10Null()
            Me(Me.tableMaestroProducto_cargador.stockMin10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMax10Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMax10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMax10Null()
            Me(Me.tableMaestroProducto_cargador.stockMax10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMin11Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMin11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMin11Null()
            Me(Me.tableMaestroProducto_cargador.stockMin11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMax11Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMax11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMax11Null()
            Me(Me.tableMaestroProducto_cargador.stockMax11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstockMin12Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.stockMin12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstockMin12Null()
            Me(Me.tableMaestroProducto_cargador.stockMin12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStockMax12Null() As Boolean
            Return Me.IsNull(Me.tableMaestroProducto_cargador.StockMax12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStockMax12Null()
            Me(Me.tableMaestroProducto_cargador.StockMax12Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_InsertaMP_cargadorDinamicoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_InsertaMP_cargadorDinamico As sp_InsertaMP_cargadorDinamicoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_InsertaMP_cargadorDinamico = CType(Me.Table,sp_InsertaMP_cargadorDinamicoDataTable)
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_actualiza_MaestroProducto_STEPRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_actualiza_MaestroProducto_STEP As sp_actualiza_MaestroProducto_STEPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_actualiza_MaestroProducto_STEP = CType(Me.Table,sp_actualiza_MaestroProducto_STEPDataTable)
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_carga_MaestroProducto_STEPRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_carga_MaestroProducto_STEP As sp_carga_MaestroProducto_STEPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_carga_MaestroProducto_STEP = CType(Me.Table,sp_carga_MaestroProducto_STEPDataTable)
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vw_pos_producto_agrupacionRow
        Inherits Global.System.Data.DataRow
        
        Private tablevw_pos_producto_agrupacion As vw_pos_producto_agrupacionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevw_pos_producto_agrupacion = CType(Me.Table,vw_pos_producto_agrupacionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPAGR() As String
            Get
                Return CType(Me(Me.tablevw_pos_producto_agrupacion.TIPAGRColumn),String)
            End Get
            Set
                Me(Me.tablevw_pos_producto_agrupacion.TIPAGRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODAGR() As String
            Get
                Return CType(Me(Me.tablevw_pos_producto_agrupacion.CODAGRColumn),String)
            End Get
            Set
                Me(Me.tablevw_pos_producto_agrupacion.CODAGRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESAGR() As String
            Get
                Return CType(Me(Me.tablevw_pos_producto_agrupacion.DESAGRColumn),String)
            End Get
            Set
                Me(Me.tablevw_pos_producto_agrupacion.DESAGRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AGAAGR() As String
            Get
                Return CType(Me(Me.tablevw_pos_producto_agrupacion.AGAAGRColumn),String)
            End Get
            Set
                Me(Me.tablevw_pos_producto_agrupacion.AGAAGRColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class maestroProducto_paisOrigenRow
        Inherits Global.System.Data.DataRow
        
        Private tablemaestroProducto_paisOrigen As maestroProducto_paisOrigenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemaestroProducto_paisOrigen = CType(Me.Table,maestroProducto_paisOrigenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdPaisOrigen() As Integer
            Get
                Return CType(Me(Me.tablemaestroProducto_paisOrigen.IdPaisOrigenColumn),Integer)
            End Get
            Set
                Me(Me.tablemaestroProducto_paisOrigen.IdPaisOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DesPaisOrigen() As String
            Get
                Try 
                    Return CType(Me(Me.tablemaestroProducto_paisOrigen.DesPaisOrigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DesPaisOrigen' de la tabla 'maestroProducto_paisOrigen' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemaestroProducto_paisOrigen.DesPaisOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSap() As String
            Get
                Try 
                    Return CType(Me(Me.tablemaestroProducto_paisOrigen.CodSapColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodSap' de la tabla 'maestroProducto_paisOrigen' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablemaestroProducto_paisOrigen.CodSapColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesPaisOrigenNull() As Boolean
            Return Me.IsNull(Me.tablemaestroProducto_paisOrigen.DesPaisOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesPaisOrigenNull()
            Me(Me.tablemaestroProducto_paisOrigen.DesPaisOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodSapNull() As Boolean
            Return Me.IsNull(Me.tablemaestroProducto_paisOrigen.CodSapColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodSapNull()
            Me(Me.tablemaestroProducto_paisOrigen.CodSapColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vw_maestroProductoRow
        Inherits Global.System.Data.DataRow
        
        Private tablevw_maestroProducto As vw_maestroProductoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevw_maestroProducto = CType(Me.Table,vw_maestroProductoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SKU() As String
            Get
                Return CType(Me(Me.tablevw_maestroProducto.SKUColumn),String)
            End Get
            Set
                Me(Me.tablevw_maestroProducto.SKUColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MaestroProducto_cargadorRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MaestroProducto_cargadorRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MaestroProducto_cargadorRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MaestroProducto_cargadorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_InsertaMP_cargadorDinamicoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_InsertaMP_cargadorDinamicoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_InsertaMP_cargadorDinamicoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_InsertaMP_cargadorDinamicoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_actualiza_MaestroProducto_STEPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_actualiza_MaestroProducto_STEPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_actualiza_MaestroProducto_STEPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_actualiza_MaestroProducto_STEPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_carga_MaestroProducto_STEPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_carga_MaestroProducto_STEPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_carga_MaestroProducto_STEPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_carga_MaestroProducto_STEPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vw_pos_producto_agrupacionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As vw_pos_producto_agrupacionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vw_pos_producto_agrupacionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vw_pos_producto_agrupacionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class maestroProducto_paisOrigenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As maestroProducto_paisOrigenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As maestroProducto_paisOrigenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As maestroProducto_paisOrigenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vw_maestroProductoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As vw_maestroProductoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vw_maestroProductoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vw_maestroProductoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace GestionTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MaestroProducto_cargadorTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MaestroProducto_cargador"
            tableMapping.ColumnMappings.Add("login", "login")
            tableMapping.ColumnMappings.Add("fila", "fila")
            tableMapping.ColumnMappings.Add("SKU", "SKU")
            tableMapping.ColumnMappings.Add("descripcionInterna", "descripcionInterna")
            tableMapping.ColumnMappings.Add("descripcionVenta", "descripcionVenta")
            tableMapping.ColumnMappings.Add("tipoProducto", "tipoProducto")
            tableMapping.ColumnMappings.Add("estado", "estado")
            tableMapping.ColumnMappings.Add("codFamilia", "codFamilia")
            tableMapping.ColumnMappings.Add("codCategoria", "codCategoria")
            tableMapping.ColumnMappings.Add("codSubCategoria", "codSubCategoria")
            tableMapping.ColumnMappings.Add("codRelacionado", "codRelacionado")
            tableMapping.ColumnMappings.Add("unidad", "unidad")
            tableMapping.ColumnMappings.Add("unidadMedida", "unidadMedida")
            tableMapping.ColumnMappings.Add("unidadMedidaConv", "unidadMedidaConv")
            tableMapping.ColumnMappings.Add("unidadCompra", "unidadCompra")
            tableMapping.ColumnMappings.Add("unidadCompraConv", "unidadCompraConv")
            tableMapping.ColumnMappings.Add("unidadLogistica", "unidadLogistica")
            tableMapping.ColumnMappings.Add("unidadLogisticaConv", "unidadLogisticaConv")
            tableMapping.ColumnMappings.Add("unidadEstadistica", "unidadEstadistica")
            tableMapping.ColumnMappings.Add("unidadEstadisticaConv", "unidadEstadisticaConv")
            tableMapping.ColumnMappings.Add("codigoBarra", "codigoBarra")
            tableMapping.ColumnMappings.Add("codigoCompra", "codigoCompra")
            tableMapping.ColumnMappings.Add("codigoFabricante", "codigoFabricante")
            tableMapping.ColumnMappings.Add("codigoAutoplanet", "codigoAutoplanet")
            tableMapping.ColumnMappings.Add("descIngles", "descIngles")
            tableMapping.ColumnMappings.Add("tipoMaterial", "tipoMaterial")
            tableMapping.ColumnMappings.Add("subagrupacion", "subagrupacion")
            tableMapping.ColumnMappings.Add("paisOrigen", "paisOrigen")
            tableMapping.ColumnMappings.Add("tipoCodigo", "tipoCodigo")
            tableMapping.ColumnMappings.Add("listaPrecioNormal", "listaPrecioNormal")
            tableMapping.ColumnMappings.Add("listaPrecioPersonal", "listaPrecioPersonal")
            tableMapping.ColumnMappings.Add("listaPrecio06", "listaPrecio06")
            tableMapping.ColumnMappings.Add("precioMerma", "precioMerma")
            tableMapping.ColumnMappings.Add("precioDevolucion", "precioDevolucion")
            tableMapping.ColumnMappings.Add("IVA", "IVA")
            tableMapping.ColumnMappings.Add("stockSeguridad", "stockSeguridad")
            tableMapping.ColumnMappings.Add("estacionalidad", "estacionalidad")
            tableMapping.ColumnMappings.Add("sobreStock", "sobreStock")
            tableMapping.ColumnMappings.Add("minPlanograma", "minPlanograma")
            tableMapping.ColumnMappings.Add("MaxPlanograma", "MaxPlanograma")
            tableMapping.ColumnMappings.Add("tamanoEstuche", "tamanoEstuche")
            tableMapping.ColumnMappings.Add("tamanoPack", "tamanoPack")
            tableMapping.ColumnMappings.Add("impRetail", "impRetail")
            tableMapping.ColumnMappings.Add("cantPorAuto", "cantPorAuto")
            tableMapping.ColumnMappings.Add("origReabas", "origReabas")
            tableMapping.ColumnMappings.Add("peso", "peso")
            tableMapping.ColumnMappings.Add("fabricante", "fabricante")
            tableMapping.ColumnMappings.Add("responsable", "responsable")
            tableMapping.ColumnMappings.Add("extension", "extension")
            tableMapping.ColumnMappings.Add("rutPorDefecto", "rutPorDefecto")
            tableMapping.ColumnMappings.Add("rut1", "rut1")
            tableMapping.ColumnMappings.Add("costo1", "costo1")
            tableMapping.ColumnMappings.Add("CodCompra1", "CodCompra1")
            tableMapping.ColumnMappings.Add("MOQ1", "MOQ1")
            tableMapping.ColumnMappings.Add("rut2", "rut2")
            tableMapping.ColumnMappings.Add("costo2", "costo2")
            tableMapping.ColumnMappings.Add("codCompra2", "codCompra2")
            tableMapping.ColumnMappings.Add("MOQ2", "MOQ2")
            tableMapping.ColumnMappings.Add("rut3", "rut3")
            tableMapping.ColumnMappings.Add("costo3", "costo3")
            tableMapping.ColumnMappings.Add("codCompra3", "codCompra3")
            tableMapping.ColumnMappings.Add("MOQ3", "MOQ3")
            tableMapping.ColumnMappings.Add("rut4", "rut4")
            tableMapping.ColumnMappings.Add("Costo4", "Costo4")
            tableMapping.ColumnMappings.Add("codCompra4", "codCompra4")
            tableMapping.ColumnMappings.Add("MOQ4", "MOQ4")
            tableMapping.ColumnMappings.Add("rut5", "rut5")
            tableMapping.ColumnMappings.Add("costo5", "costo5")
            tableMapping.ColumnMappings.Add("codCompra5", "codCompra5")
            tableMapping.ColumnMappings.Add("MOQ5", "MOQ5")
            tableMapping.ColumnMappings.Add("alarmado", "alarmado")
            tableMapping.ColumnMappings.Add("etiquetado", "etiquetado")
            tableMapping.ColumnMappings.Add("traduccion", "traduccion")
            tableMapping.ColumnMappings.Add("embolsado", "embolsado")
            tableMapping.ColumnMappings.Add("enzunchado", "enzunchado")
            tableMapping.ColumnMappings.Add("largo", "largo")
            tableMapping.ColumnMappings.Add("ancho", "ancho")
            tableMapping.ColumnMappings.Add("alto", "alto")
            tableMapping.ColumnMappings.Add("codigoBarraAlt1", "codigoBarraAlt1")
            tableMapping.ColumnMappings.Add("codigoBarraAlt2", "codigoBarraAlt2")
            tableMapping.ColumnMappings.Add("codigoBarraAlt3", "codigoBarraAlt3")
            tableMapping.ColumnMappings.Add("codigoBarraAlt4", "codigoBarraAlt4")
            tableMapping.ColumnMappings.Add("codigoBarraAlt5", "codigoBarraAlt5")
            tableMapping.ColumnMappings.Add("codigoBarraAlt6", "codigoBarraAlt6")
            tableMapping.ColumnMappings.Add("stockMin1", "stockMin1")
            tableMapping.ColumnMappings.Add("stockMax1", "stockMax1")
            tableMapping.ColumnMappings.Add("stockMin2", "stockMin2")
            tableMapping.ColumnMappings.Add("stockMax2", "stockMax2")
            tableMapping.ColumnMappings.Add("stockMin3", "stockMin3")
            tableMapping.ColumnMappings.Add("stockMax3", "stockMax3")
            tableMapping.ColumnMappings.Add("stockMin4", "stockMin4")
            tableMapping.ColumnMappings.Add("stockMax4", "stockMax4")
            tableMapping.ColumnMappings.Add("stockMin5", "stockMin5")
            tableMapping.ColumnMappings.Add("stockMax5", "stockMax5")
            tableMapping.ColumnMappings.Add("stockMin6", "stockMin6")
            tableMapping.ColumnMappings.Add("stockMax6", "stockMax6")
            tableMapping.ColumnMappings.Add("stockMin7", "stockMin7")
            tableMapping.ColumnMappings.Add("stockMax7", "stockMax7")
            tableMapping.ColumnMappings.Add("stockMin8", "stockMin8")
            tableMapping.ColumnMappings.Add("stockMax8", "stockMax8")
            tableMapping.ColumnMappings.Add("stockMin9", "stockMin9")
            tableMapping.ColumnMappings.Add("stockMax9", "stockMax9")
            tableMapping.ColumnMappings.Add("stockMin10", "stockMin10")
            tableMapping.ColumnMappings.Add("stockMax10", "stockMax10")
            tableMapping.ColumnMappings.Add("stockMin11", "stockMin11")
            tableMapping.ColumnMappings.Add("stockMax11", "stockMax11")
            tableMapping.ColumnMappings.Add("stockMin12", "stockMin12")
            tableMapping.ColumnMappings.Add("StockMax12", "StockMax12")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [MaestroProducto_cargador] ([login], [fila], [SKU], [descripcionInter"& _ 
                "na], [descripcionVenta], [tipoProducto], [estado], [codFamilia], [codCategoria],"& _ 
                " [codSubCategoria], [codRelacionado], [unidad], [unidadMedida], [unidadMedidaCon"& _ 
                "v], [unidadCompra], [unidadCompraConv], [unidadLogistica], [unidadLogisticaConv]"& _ 
                ", [unidadEstadistica], [unidadEstadisticaConv], [codigoBarra], [codigoCompra], ["& _ 
                "codigoFabricante], [codigoAutoplanet], [descIngles], [tipoMaterial], [subagrupac"& _ 
                "ion], [paisOrigen], [tipoCodigo], [listaPrecioNormal], [listaPrecioPersonal], [l"& _ 
                "istaPrecio06], [precioMerma], [precioDevolucion], [IVA], [stockSeguridad], [esta"& _ 
                "cionalidad], [sobreStock], [minPlanograma], [MaxPlanograma], [tamanoEstuche], [t"& _ 
                "amanoPack], [impRetail], [cantPorAuto], [origReabas], [peso], [fabricante], [res"& _ 
                "ponsable], [extension], [rutPorDefecto], [rut1], [costo1], [CodCompra1], [MOQ1],"& _ 
                " [rut2], [costo2], [codCompra2], [MOQ2], [rut3], [costo3], [codCompra3], [MOQ3],"& _ 
                " [rut4], [Costo4], [codCompra4], [MOQ4], [rut5], [costo5], [codCompra5], [MOQ5],"& _ 
                " [alarmado], [etiquetado], [traduccion], [embolsado], [enzunchado], [largo], [an"& _ 
                "cho], [alto], [codigoBarraAlt1], [codigoBarraAlt2], [codigoBarraAlt3], [codigoBa"& _ 
                "rraAlt4], [codigoBarraAlt5], [codigoBarraAlt6], [stockMin1], [stockMax1], [stock"& _ 
                "Min2], [stockMax2], [stockMin3], [stockMax3], [stockMin4], [stockMax4], [stockMi"& _ 
                "n5], [stockMax5], [stockMin6], [stockMax6], [stockMin7], [stockMax7], [stockMin8"& _ 
                "], [stockMax8], [stockMin9], [stockMax9], [stockMin10], [stockMax10], [stockMin1"& _ 
                "1], [stockMax11], [stockMin12], [StockMax12]) VALUES (@login, @fila, @SKU, @desc"& _ 
                "ripcionInterna, @descripcionVenta, @tipoProducto, @estado, @codFamilia, @codCate"& _ 
                "goria, @codSubCategoria, @codRelacionado, @unidad, @unidadMedida, @unidadMedidaC"& _ 
                "onv, @unidadCompra, @unidadCompraConv, @unidadLogistica, @unidadLogisticaConv, @"& _ 
                "unidadEstadistica, @unidadEstadisticaConv, @codigoBarra, @codigoCompra, @codigoF"& _ 
                "abricante, @codigoAutoplanet, @descIngles, @tipoMaterial, @subagrupacion, @paisO"& _ 
                "rigen, @tipoCodigo, @listaPrecioNormal, @listaPrecioPersonal, @listaPrecio06, @p"& _ 
                "recioMerma, @precioDevolucion, @IVA, @stockSeguridad, @estacionalidad, @sobreSto"& _ 
                "ck, @minPlanograma, @MaxPlanograma, @tamanoEstuche, @tamanoPack, @impRetail, @ca"& _ 
                "ntPorAuto, @origReabas, @peso, @fabricante, @responsable, @extension, @rutPorDef"& _ 
                "ecto, @rut1, @costo1, @CodCompra1, @MOQ1, @rut2, @costo2, @codCompra2, @MOQ2, @r"& _ 
                "ut3, @costo3, @codCompra3, @MOQ3, @rut4, @Costo4, @codCompra4, @MOQ4, @rut5, @co"& _ 
                "sto5, @codCompra5, @MOQ5, @alarmado, @etiquetado, @traduccion, @embolsado, @enzu"& _ 
                "nchado, @largo, @ancho, @alto, @codigoBarraAlt1, @codigoBarraAlt2, @codigoBarraA"& _ 
                "lt3, @codigoBarraAlt4, @codigoBarraAlt5, @codigoBarraAlt6, @stockMin1, @stockMax"& _ 
                "1, @stockMin2, @stockMax2, @stockMin3, @stockMax3, @stockMin4, @stockMax4, @stoc"& _ 
                "kMin5, @stockMax5, @stockMin6, @stockMax6, @stockMin7, @stockMax7, @stockMin8, @"& _ 
                "stockMax8, @stockMin9, @stockMax9, @stockMin10, @stockMax10, @stockMin11, @stock"& _ 
                "Max11, @stockMin12, @StockMax12)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@login", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "login", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fila", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fila", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SKU", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SKU", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@descripcionInterna", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "descripcionInterna", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@descripcionVenta", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "descripcionVenta", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tipoProducto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tipoProducto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codFamilia", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codFamilia", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codCategoria", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codCategoria", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codSubCategoria", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codSubCategoria", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codRelacionado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codRelacionado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unidad", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unidad", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unidadMedida", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unidadMedida", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unidadMedidaConv", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unidadMedidaConv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unidadCompra", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unidadCompra", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unidadCompraConv", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unidadCompraConv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unidadLogistica", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unidadLogistica", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unidadLogisticaConv", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unidadLogisticaConv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unidadEstadistica", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unidadEstadistica", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unidadEstadisticaConv", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unidadEstadisticaConv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codigoBarra", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codigoBarra", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codigoCompra", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codigoCompra", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codigoFabricante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codigoFabricante", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codigoAutoplanet", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codigoAutoplanet", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@descIngles", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "descIngles", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tipoMaterial", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tipoMaterial", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@subagrupacion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "subagrupacion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@paisOrigen", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "paisOrigen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tipoCodigo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tipoCodigo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@listaPrecioNormal", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "listaPrecioNormal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@listaPrecioPersonal", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "listaPrecioPersonal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@listaPrecio06", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "listaPrecio06", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@precioMerma", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "precioMerma", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@precioDevolucion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "precioDevolucion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IVA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IVA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockSeguridad", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockSeguridad", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@estacionalidad", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "estacionalidad", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sobreStock", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sobreStock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@minPlanograma", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "minPlanograma", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaxPlanograma", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaxPlanograma", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tamanoEstuche", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tamanoEstuche", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tamanoPack", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tamanoPack", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@impRetail", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "impRetail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cantPorAuto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cantPorAuto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@origReabas", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "origReabas", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@peso", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "peso", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fabricante", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fabricante", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@responsable", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "responsable", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@extension", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "extension", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rutPorDefecto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rutPorDefecto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rut1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rut1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@costo1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "costo1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodCompra1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodCompra1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MOQ1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MOQ1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rut2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rut2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@costo2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "costo2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codCompra2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codCompra2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MOQ2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MOQ2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rut3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rut3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@costo3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "costo3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codCompra3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codCompra3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MOQ3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MOQ3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rut4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rut4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Costo4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Costo4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codCompra4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codCompra4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MOQ4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MOQ4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rut5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rut5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@costo5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "costo5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codCompra5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codCompra5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MOQ5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MOQ5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alarmado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alarmado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@etiquetado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "etiquetado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@traduccion", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "traduccion", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@embolsado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "embolsado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@enzunchado", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "enzunchado", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@largo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "largo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ancho", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ancho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alto", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "alto", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codigoBarraAlt1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codigoBarraAlt1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codigoBarraAlt2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codigoBarraAlt2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codigoBarraAlt3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codigoBarraAlt3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codigoBarraAlt4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codigoBarraAlt4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codigoBarraAlt5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codigoBarraAlt5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codigoBarraAlt6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codigoBarraAlt6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMin1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMin1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMax1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMax1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMin2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMin2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMax2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMax2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMin3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMin3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMax3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMax3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMin4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMin4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMax4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMax4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMin5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMin5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMax5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMax5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMin6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMin6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMax6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMax6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMin7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMin7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMax7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMax7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMin8", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMin8", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMax8", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMax8", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMin9", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMin9", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMax9", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMax9", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMin10", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMin10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMax10", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMax10", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMin11", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMin11", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMax11", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMax11", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stockMin12", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stockMin12", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StockMax12", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StockMax12", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CargadorStepForm.My.MySettings.Default.GestionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select * from MaestroProducto_cargador"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM MaestroProducto_cargador WHERE login=@login"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@login", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "login", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Gestion.MaestroProducto_cargadorDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Gestion.MaestroProducto_cargadorDataTable = New Gestion.MaestroProducto_cargadorDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Gestion.MaestroProducto_cargadorDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Gestion) As Integer
            Return Me.Adapter.Update(dataSet, "MaestroProducto_cargador")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal login As String,  _
                    ByVal fila As Long,  _
                    ByVal SKU As String,  _
                    ByVal descripcionInterna As String,  _
                    ByVal descripcionVenta As String,  _
                    ByVal tipoProducto As String,  _
                    ByVal estado As String,  _
                    ByVal codFamilia As String,  _
                    ByVal codCategoria As String,  _
                    ByVal codSubCategoria As String,  _
                    ByVal codRelacionado As String,  _
                    ByVal unidad As String,  _
                    ByVal unidadMedida As String,  _
                    ByVal unidadMedidaConv As String,  _
                    ByVal unidadCompra As String,  _
                    ByVal unidadCompraConv As String,  _
                    ByVal unidadLogistica As String,  _
                    ByVal unidadLogisticaConv As String,  _
                    ByVal unidadEstadistica As String,  _
                    ByVal unidadEstadisticaConv As String,  _
                    ByVal codigoBarra As String,  _
                    ByVal codigoCompra As String,  _
                    ByVal codigoFabricante As String,  _
                    ByVal codigoAutoplanet As String,  _
                    ByVal descIngles As String,  _
                    ByVal tipoMaterial As String,  _
                    ByVal subagrupacion As String,  _
                    ByVal paisOrigen As String,  _
                    ByVal tipoCodigo As String,  _
                    ByVal listaPrecioNormal As String,  _
                    ByVal listaPrecioPersonal As String,  _
                    ByVal listaPrecio06 As String,  _
                    ByVal precioMerma As String,  _
                    ByVal precioDevolucion As String,  _
                    ByVal IVA As String,  _
                    ByVal stockSeguridad As String,  _
                    ByVal estacionalidad As String,  _
                    ByVal sobreStock As String,  _
                    ByVal minPlanograma As String,  _
                    ByVal MaxPlanograma As String,  _
                    ByVal tamanoEstuche As String,  _
                    ByVal tamanoPack As String,  _
                    ByVal impRetail As String,  _
                    ByVal cantPorAuto As String,  _
                    ByVal origReabas As String,  _
                    ByVal peso As String,  _
                    ByVal fabricante As String,  _
                    ByVal responsable As String,  _
                    ByVal extension As String,  _
                    ByVal rutPorDefecto As String,  _
                    ByVal rut1 As String,  _
                    ByVal costo1 As String,  _
                    ByVal CodCompra1 As String,  _
                    ByVal MOQ1 As String,  _
                    ByVal rut2 As String,  _
                    ByVal costo2 As String,  _
                    ByVal codCompra2 As String,  _
                    ByVal MOQ2 As String,  _
                    ByVal rut3 As String,  _
                    ByVal costo3 As String,  _
                    ByVal codCompra3 As String,  _
                    ByVal MOQ3 As String,  _
                    ByVal rut4 As String,  _
                    ByVal Costo4 As String,  _
                    ByVal codCompra4 As String,  _
                    ByVal MOQ4 As String,  _
                    ByVal rut5 As String,  _
                    ByVal costo5 As String,  _
                    ByVal codCompra5 As String,  _
                    ByVal MOQ5 As String,  _
                    ByVal alarmado As String,  _
                    ByVal etiquetado As String,  _
                    ByVal traduccion As String,  _
                    ByVal embolsado As String,  _
                    ByVal enzunchado As String,  _
                    ByVal largo As String,  _
                    ByVal ancho As String,  _
                    ByVal alto As String,  _
                    ByVal codigoBarraAlt1 As String,  _
                    ByVal codigoBarraAlt2 As String,  _
                    ByVal codigoBarraAlt3 As String,  _
                    ByVal codigoBarraAlt4 As String,  _
                    ByVal codigoBarraAlt5 As String,  _
                    ByVal codigoBarraAlt6 As String,  _
                    ByVal stockMin1 As String,  _
                    ByVal stockMax1 As String,  _
                    ByVal stockMin2 As String,  _
                    ByVal stockMax2 As String,  _
                    ByVal stockMin3 As String,  _
                    ByVal stockMax3 As String,  _
                    ByVal stockMin4 As String,  _
                    ByVal stockMax4 As String,  _
                    ByVal stockMin5 As String,  _
                    ByVal stockMax5 As String,  _
                    ByVal stockMin6 As String,  _
                    ByVal stockMax6 As String,  _
                    ByVal stockMin7 As String,  _
                    ByVal stockMax7 As String,  _
                    ByVal stockMin8 As String,  _
                    ByVal stockMax8 As String,  _
                    ByVal stockMin9 As String,  _
                    ByVal stockMax9 As String,  _
                    ByVal stockMin10 As String,  _
                    ByVal stockMax10 As String,  _
                    ByVal stockMin11 As String,  _
                    ByVal stockMax11 As String,  _
                    ByVal stockMin12 As String,  _
                    ByVal StockMax12 As String) As Integer
            If (login Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(login,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(fila,Long)
            If (SKU Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SKU,String)
            End If
            If (descripcionInterna Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(descripcionInterna,String)
            End If
            If (descripcionVenta Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(descripcionVenta,String)
            End If
            If (tipoProducto Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(tipoProducto,String)
            End If
            If (estado Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(estado,String)
            End If
            If (codFamilia Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(codFamilia,String)
            End If
            If (codCategoria Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(codCategoria,String)
            End If
            If (codSubCategoria Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(codSubCategoria,String)
            End If
            If (codRelacionado Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(codRelacionado,String)
            End If
            If (unidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(unidad,String)
            End If
            If (unidadMedida Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(unidadMedida,String)
            End If
            If (unidadMedidaConv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(unidadMedidaConv,String)
            End If
            If (unidadCompra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(unidadCompra,String)
            End If
            If (unidadCompraConv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(unidadCompraConv,String)
            End If
            If (unidadLogistica Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(unidadLogistica,String)
            End If
            If (unidadLogisticaConv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(unidadLogisticaConv,String)
            End If
            If (unidadEstadistica Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(unidadEstadistica,String)
            End If
            If (unidadEstadisticaConv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(unidadEstadisticaConv,String)
            End If
            If (codigoBarra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(codigoBarra,String)
            End If
            If (codigoCompra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(codigoCompra,String)
            End If
            If (codigoFabricante Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(codigoFabricante,String)
            End If
            If (codigoAutoplanet Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(codigoAutoplanet,String)
            End If
            If (descIngles Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(descIngles,String)
            End If
            If (tipoMaterial Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(tipoMaterial,String)
            End If
            If (subagrupacion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(subagrupacion,String)
            End If
            If (paisOrigen Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(paisOrigen,String)
            End If
            If (tipoCodigo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(tipoCodigo,String)
            End If
            If (listaPrecioNormal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(listaPrecioNormal,String)
            End If
            If (listaPrecioPersonal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(listaPrecioPersonal,String)
            End If
            If (listaPrecio06 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(listaPrecio06,String)
            End If
            If (precioMerma Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(precioMerma,String)
            End If
            If (precioDevolucion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(precioDevolucion,String)
            End If
            If (IVA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(IVA,String)
            End If
            If (stockSeguridad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(stockSeguridad,String)
            End If
            If (estacionalidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(estacionalidad,String)
            End If
            If (sobreStock Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(sobreStock,String)
            End If
            If (minPlanograma Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(minPlanograma,String)
            End If
            If (MaxPlanograma Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(MaxPlanograma,String)
            End If
            If (tamanoEstuche Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(tamanoEstuche,String)
            End If
            If (tamanoPack Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(tamanoPack,String)
            End If
            If (impRetail Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(impRetail,String)
            End If
            If (cantPorAuto Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(cantPorAuto,String)
            End If
            If (origReabas Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(origReabas,String)
            End If
            If (peso Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(peso,String)
            End If
            If (fabricante Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(fabricante,String)
            End If
            If (responsable Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(responsable,String)
            End If
            If (extension Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(extension,String)
            End If
            If (rutPorDefecto Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(rutPorDefecto,String)
            End If
            If (rut1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(rut1,String)
            End If
            If (costo1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(costo1,String)
            End If
            If (CodCompra1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(CodCompra1,String)
            End If
            If (MOQ1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(MOQ1,String)
            End If
            If (rut2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(rut2,String)
            End If
            If (costo2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(costo2,String)
            End If
            If (codCompra2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(codCompra2,String)
            End If
            If (MOQ2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(MOQ2,String)
            End If
            If (rut3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(rut3,String)
            End If
            If (costo3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(costo3,String)
            End If
            If (codCompra3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(codCompra3,String)
            End If
            If (MOQ3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(MOQ3,String)
            End If
            If (rut4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(rut4,String)
            End If
            If (Costo4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(Costo4,String)
            End If
            If (codCompra4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(codCompra4,String)
            End If
            If (MOQ4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(MOQ4,String)
            End If
            If (rut5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(66).Value = CType(rut5,String)
            End If
            If (costo5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(costo5,String)
            End If
            If (codCompra5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(codCompra5,String)
            End If
            If (MOQ5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(69).Value = CType(MOQ5,String)
            End If
            If (alarmado Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(70).Value = CType(alarmado,String)
            End If
            If (etiquetado Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(71).Value = CType(etiquetado,String)
            End If
            If (traduccion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(72).Value = CType(traduccion,String)
            End If
            If (embolsado Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(73).Value = CType(embolsado,String)
            End If
            If (enzunchado Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(74).Value = CType(enzunchado,String)
            End If
            If (largo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(75).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(75).Value = CType(largo,String)
            End If
            If (ancho Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(76).Value = CType(ancho,String)
            End If
            If (alto Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(77).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(77).Value = CType(alto,String)
            End If
            If (codigoBarraAlt1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(78).Value = CType(codigoBarraAlt1,String)
            End If
            If (codigoBarraAlt2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(79).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(79).Value = CType(codigoBarraAlt2,String)
            End If
            If (codigoBarraAlt3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(80).Value = CType(codigoBarraAlt3,String)
            End If
            If (codigoBarraAlt4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(81).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(81).Value = CType(codigoBarraAlt4,String)
            End If
            If (codigoBarraAlt5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(82).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(82).Value = CType(codigoBarraAlt5,String)
            End If
            If (codigoBarraAlt6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(83).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(83).Value = CType(codigoBarraAlt6,String)
            End If
            If (stockMin1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(84).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(84).Value = CType(stockMin1,String)
            End If
            If (stockMax1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(85).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(85).Value = CType(stockMax1,String)
            End If
            If (stockMin2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(86).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(86).Value = CType(stockMin2,String)
            End If
            If (stockMax2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(87).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(87).Value = CType(stockMax2,String)
            End If
            If (stockMin3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(88).Value = CType(stockMin3,String)
            End If
            If (stockMax3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(89).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(89).Value = CType(stockMax3,String)
            End If
            If (stockMin4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(90).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(90).Value = CType(stockMin4,String)
            End If
            If (stockMax4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(91).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(91).Value = CType(stockMax4,String)
            End If
            If (stockMin5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(92).Value = CType(stockMin5,String)
            End If
            If (stockMax5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(93).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(93).Value = CType(stockMax5,String)
            End If
            If (stockMin6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(94).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(94).Value = CType(stockMin6,String)
            End If
            If (stockMax6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(95).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(95).Value = CType(stockMax6,String)
            End If
            If (stockMin7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(96).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(96).Value = CType(stockMin7,String)
            End If
            If (stockMax7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(97).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(97).Value = CType(stockMax7,String)
            End If
            If (stockMin8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(98).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(98).Value = CType(stockMin8,String)
            End If
            If (stockMax8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(99).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(99).Value = CType(stockMax8,String)
            End If
            If (stockMin9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(100).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(100).Value = CType(stockMin9,String)
            End If
            If (stockMax9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(101).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(101).Value = CType(stockMax9,String)
            End If
            If (stockMin10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(102).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(102).Value = CType(stockMin10,String)
            End If
            If (stockMax10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(103).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(103).Value = CType(stockMax10,String)
            End If
            If (stockMin11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(104).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(104).Value = CType(stockMin11,String)
            End If
            If (stockMax11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(105).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(105).Value = CType(stockMax11,String)
            End If
            If (stockMin12 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(106).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(106).Value = CType(stockMin12,String)
            End If
            If (StockMax12 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(107).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(107).Value = CType(StockMax12,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function EliminaPorLogin(ByVal login As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (login Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(login,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_InsertaMP_cargadorDinamicoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CargadorStepForm.My.MySettings.Default.GestionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_InsertaMP_cargadorDinamico"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SQL", Global.System.Data.SqlDbType.NVarChar, 4000, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function sp_InsertaMP_cargadorDinamico(ByVal SQL As String) As Gestion.sp_InsertaMP_cargadorDinamicoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (SQL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SQL,String)
            End If
            Dim dataTable As Gestion.sp_InsertaMP_cargadorDinamicoDataTable = New Gestion.sp_InsertaMP_cargadorDinamicoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_actualiza_MaestroProducto_STEPTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CargadorStepForm.My.MySettings.Default.GestionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_actualiza_MaestroProducto_STEP"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@login", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fila", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "dbo.sp_actualiza_MaestroProducto_STEP"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@login", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fila", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function __GetData(ByVal login As String, ByVal fila As Global.System.Nullable(Of Integer)) As Gestion.sp_actualiza_MaestroProducto_STEPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (login Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(login,String)
            End If
            If (fila.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(fila.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As Gestion.sp_actualiza_MaestroProducto_STEPDataTable = New Gestion.sp_actualiza_MaestroProducto_STEPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_actualiza_MaestroProducto_STEP(ByVal login As String, ByVal fila As Global.System.Nullable(Of Integer)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (login Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(login,String)
            End If
            If (fila.HasValue = true) Then
                command.Parameters(2).Value = CType(fila.Value,Integer)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_carga_MaestroProducto_STEPTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CargadorStepForm.My.MySettings.Default.GestionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_carga_MaestroProducto_STEP"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@login", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "dbo.sp_carga_MaestroProducto_STEP"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@login", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fila", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function __GetData(ByVal login As String) As Gestion.sp_carga_MaestroProducto_STEPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (login Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(login,String)
            End If
            Dim dataTable As Gestion.sp_carga_MaestroProducto_STEPDataTable = New Gestion.sp_carga_MaestroProducto_STEPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function sp_carga_MaestroProducto_STEP(ByVal login As String, ByVal fila As Global.System.Nullable(Of Integer)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (login Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(login,String)
            End If
            If (fila.HasValue = true) Then
                command.Parameters(2).Value = CType(fila.Value,Integer)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class vw_pos_producto_agrupacionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "vw_pos_producto_agrupacion"
            tableMapping.ColumnMappings.Add("TIPAGR", "TIPAGR")
            tableMapping.ColumnMappings.Add("CODAGR", "CODAGR")
            tableMapping.ColumnMappings.Add("DESAGR", "DESAGR")
            tableMapping.ColumnMappings.Add("AGAAGR", "AGAAGR")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CargadorStepForm.My.MySettings.Default.GestionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select * from vw_pos_producto_agrupacion"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "select CODAGR from vw_pos_producto_agrupacion where TIPAGR = 'CATE' and DESAGR = "& _ 
                "@DescCategoria"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DescCategoria", Global.System.Data.SqlDbType.[Char], 50, Global.System.Data.ParameterDirection.Input, 0, 0, "DESAGR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "select CODAGR from vw_pos_producto_agrupacion where TIPAGR = 'SCAT' and DESAGR = "& _ 
                "@DescSubcategoria"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DescSubcategoria", Global.System.Data.SqlDbType.[Char], 50, Global.System.Data.ParameterDirection.Input, 0, 0, "DESAGR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Gestion.vw_pos_producto_agrupacionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Gestion.vw_pos_producto_agrupacionDataTable = New Gestion.vw_pos_producto_agrupacionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetCodCategoria(ByVal DescCategoria As String) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (DescCategoria Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DescCategoria")
            Else
                command.Parameters(0).Value = CType(DescCategoria,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetCodSubcategoria(ByVal DescSubcategoria As String) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (DescSubcategoria Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DescSubcategoria")
            Else
                command.Parameters(0).Value = CType(DescSubcategoria,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class maestroProducto_paisOrigenTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "maestroProducto_paisOrigen"
            tableMapping.ColumnMappings.Add("IdPaisOrigen", "IdPaisOrigen")
            tableMapping.ColumnMappings.Add("DesPaisOrigen", "DesPaisOrigen")
            tableMapping.ColumnMappings.Add("CodSap", "CodSap")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [maestroProducto_paisOrigen] WHERE (([IdPaisOrigen] = @Original_IdPai"& _ 
                "sOrigen) AND ((@IsNull_DesPaisOrigen = 1 AND [DesPaisOrigen] IS NULL) OR ([DesPa"& _ 
                "isOrigen] = @Original_DesPaisOrigen)) AND ((@IsNull_CodSap = 1 AND [CodSap] IS N"& _ 
                "ULL) OR ([CodSap] = @Original_CodSap)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdPaisOrigen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdPaisOrigen", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DesPaisOrigen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DesPaisOrigen", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DesPaisOrigen", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DesPaisOrigen", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodSap", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodSap", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodSap", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodSap", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [maestroProducto_paisOrigen] ([DesPaisOrigen], [CodSap]) VALUES (@Des"& _ 
                "PaisOrigen, @CodSap);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IdPaisOrigen, DesPaisOrigen, CodSap FROM maestroPr"& _ 
                "oducto_paisOrigen WHERE (IdPaisOrigen = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DesPaisOrigen", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DesPaisOrigen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodSap", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodSap", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [maestroProducto_paisOrigen] SET [DesPaisOrigen] = @DesPaisOrigen, [CodSap"& _ 
                "] = @CodSap WHERE (([IdPaisOrigen] = @Original_IdPaisOrigen) AND ((@IsNull_DesPa"& _ 
                "isOrigen = 1 AND [DesPaisOrigen] IS NULL) OR ([DesPaisOrigen] = @Original_DesPai"& _ 
                "sOrigen)) AND ((@IsNull_CodSap = 1 AND [CodSap] IS NULL) OR ([CodSap] = @Origina"& _ 
                "l_CodSap)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IdPaisOrigen, DesPaisOrigen, CodSap FROM maestroProducto_pa"& _ 
                "isOrigen WHERE (IdPaisOrigen = @IdPaisOrigen)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DesPaisOrigen", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DesPaisOrigen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodSap", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodSap", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdPaisOrigen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdPaisOrigen", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DesPaisOrigen", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DesPaisOrigen", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DesPaisOrigen", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DesPaisOrigen", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CodSap", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodSap", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CodSap", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodSap", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdPaisOrigen", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IdPaisOrigen", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CargadorStepForm.My.MySettings.Default.GestionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        IdPaisOrigen, DesPaisOrigen, CodSap"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            maestroProduct"& _ 
                "o_paisOrigen"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "select DesPaisOrigen from maestroProducto_paisOrigen where CodSap=@CodSap"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodSap", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "CodSap", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Gestion.maestroProducto_paisOrigenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Gestion.maestroProducto_paisOrigenDataTable = New Gestion.maestroProducto_paisOrigenDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Gestion.maestroProducto_paisOrigenDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Gestion) As Integer
            Return Me.Adapter.Update(dataSet, "maestroProducto_paisOrigen")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IdPaisOrigen As Integer, ByVal Original_DesPaisOrigen As String, ByVal Original_CodSap As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IdPaisOrigen,Integer)
            If (Original_DesPaisOrigen Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DesPaisOrigen,String)
            End If
            If (Original_CodSap Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CodSap,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DesPaisOrigen As String, ByVal CodSap As String) As Integer
            If (DesPaisOrigen Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DesPaisOrigen,String)
            End If
            If (CodSap Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CodSap,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DesPaisOrigen As String, ByVal CodSap As String, ByVal Original_IdPaisOrigen As Integer, ByVal Original_DesPaisOrigen As String, ByVal Original_CodSap As String, ByVal IdPaisOrigen As Integer) As Integer
            If (DesPaisOrigen Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DesPaisOrigen,String)
            End If
            If (CodSap Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CodSap,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IdPaisOrigen,Integer)
            If (Original_DesPaisOrigen Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_DesPaisOrigen,String)
            End If
            If (Original_CodSap Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CodSap,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(IdPaisOrigen,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DesPaisOrigen As String, ByVal CodSap As String, ByVal Original_IdPaisOrigen As Integer, ByVal Original_DesPaisOrigen As String, ByVal Original_CodSap As String) As Integer
            Return Me.Update(DesPaisOrigen, CodSap, Original_IdPaisOrigen, Original_DesPaisOrigen, Original_CodSap, Original_IdPaisOrigen)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetDescPaisOrigen(ByVal CodSap As String) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (CodSap Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(CodSap,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class vw_maestroProductoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "vw_maestroProducto"
            tableMapping.ColumnMappings.Add("SKU", "SKU")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.CargadorStepForm.My.MySettings.Default.GestionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select top 1 SKU from [vw_maestroProducto] where SKU=@SKU"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SKU", Global.System.Data.SqlDbType.[Char], 32, Global.System.Data.ParameterDirection.Input, 0, 0, "SKU", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function ValidaExistenciaSKU1(ByVal SKU As String) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(0)
            If (SKU Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SKU")
            Else
                command.Parameters(0).Value = CType(SKU,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _maestroProducto_cargadorTableAdapter As MaestroProducto_cargadorTableAdapter
        
        Private _maestroProducto_paisOrigenTableAdapter As maestroProducto_paisOrigenTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MaestroProducto_cargadorTableAdapter() As MaestroProducto_cargadorTableAdapter
            Get
                Return Me._maestroProducto_cargadorTableAdapter
            End Get
            Set
                Me._maestroProducto_cargadorTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property maestroProducto_paisOrigenTableAdapter() As maestroProducto_paisOrigenTableAdapter
            Get
                Return Me._maestroProducto_paisOrigenTableAdapter
            End Get
            Set
                Me._maestroProducto_paisOrigenTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._maestroProducto_cargadorTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._maestroProducto_cargadorTableAdapter.Connection) Is Nothing)) Then
                    Return Me._maestroProducto_cargadorTableAdapter.Connection
                End If
                If ((Not (Me._maestroProducto_paisOrigenTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._maestroProducto_paisOrigenTableAdapter.Connection) Is Nothing)) Then
                    Return Me._maestroProducto_paisOrigenTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._maestroProducto_cargadorTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._maestroProducto_paisOrigenTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As Gestion, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._maestroProducto_paisOrigenTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.maestroProducto_paisOrigen.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._maestroProducto_paisOrigenTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._maestroProducto_cargadorTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MaestroProducto_cargador.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._maestroProducto_cargadorTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As Gestion, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._maestroProducto_paisOrigenTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.maestroProducto_paisOrigen.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._maestroProducto_paisOrigenTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._maestroProducto_cargadorTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MaestroProducto_cargador.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._maestroProducto_cargadorTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As Gestion, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._maestroProducto_cargadorTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MaestroProducto_cargador.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._maestroProducto_cargadorTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._maestroProducto_paisOrigenTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.maestroProducto_paisOrigen.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._maestroProducto_paisOrigenTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As Gestion) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._maestroProducto_cargadorTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._maestroProducto_cargadorTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            If ((Not (Me._maestroProducto_paisOrigenTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._maestroProducto_paisOrigenTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi"& _ 
                        "sma cadena de conexión.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._maestroProducto_cargadorTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._maestroProducto_cargadorTableAdapter, Me._maestroProducto_cargadorTableAdapter.Connection)
                    Me._maestroProducto_cargadorTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._maestroProducto_cargadorTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._maestroProducto_cargadorTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._maestroProducto_cargadorTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._maestroProducto_cargadorTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._maestroProducto_paisOrigenTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._maestroProducto_paisOrigenTableAdapter, Me._maestroProducto_paisOrigenTableAdapter.Connection)
                    Me._maestroProducto_paisOrigenTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._maestroProducto_paisOrigenTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._maestroProducto_paisOrigenTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._maestroProducto_paisOrigenTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._maestroProducto_paisOrigenTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._maestroProducto_cargadorTableAdapter) Is Nothing) Then
                    Me._maestroProducto_cargadorTableAdapter.Connection = CType(revertConnections(Me._maestroProducto_cargadorTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._maestroProducto_cargadorTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._maestroProducto_paisOrigenTableAdapter) Is Nothing) Then
                    Me._maestroProducto_paisOrigenTableAdapter.Connection = CType(revertConnections(Me._maestroProducto_paisOrigenTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._maestroProducto_paisOrigenTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
